" ============================================
" surround.vim
" ============================================
" gettextnize texts
let g:surround_103 = "loc('\r')"  " 103 = g
let g:surround_71 = "loc(\"\r\")" " 71 = G
nmap g' cs'g
nmap g" cs"G

" surround the word with characters you set
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround

" ============================================
" fuzzyfinder
" ============================================
nnoremap <unique> <silent> <C-L> :FufBuffer!<CR>
nnoremap <unique> <silent> ef :FufFile!<CR>
nnoremap <silent> efb :FufBuffer!<CR>
nnoremap <silent> eff :FufFile!<CR>
nnoremap <silent> efm :FufMruFile!<CR>
autocmd FileType fuf nmap <C-c> <ESC>
let g:fuf_patternSeparator = ' '
let g:fuf_modesDisable = ['mrucmd']
let g:fuf_mrufile_exclude = '\v\~$|\.bak$|\.swp|\.howm$'
let g:fuf_mrufile_maxItem = 2000
let g:fuf_enumeratingLimit = 20

" ============================================
" CtrlP 
" ============================================
let g:ctrlp_jump_to_buffer      = 2
let g:ctrlp_working_path_mode   = 2
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_mruf_max            = 500
nnoremap ,ff :CtrlP<CR>
nnoremap ,fb :CtrlPBuffer<CR>
nnoremap ,fm :CtrlPMRUFiles<CR>
let g:ctrlp_max_height = &lines

" ============================================
" Ctags
" ============================================
" search tags under current dir
set tags+=./tags;/

" use :tjump
nnoremap <C-]> g<C-]>
nnoremap g<C-]> <C-]>

" (Ctrl + [) for tag jump back
nmap <c-[>  :pop<CR>

"QuickFix list
nnoremap <C-q><C-n> :cnext<CR>
nnoremap <C-q>n :cnext<CR>
nnoremap <C-q><C-p> :cprevious<CR>
nnoremap <C-q>p :cprevious<CR>
" tag stack
" nnoremap <C-t><C-t> <C-t>
" nnoremap <C-t>t <C-t>
" nnoremap <C-t><C-n> :tnext<CR>
" nnoremap <C-t>n :tnext<CR>
" nnoremap <C-t><C-p> :tprevious<CR>
" nnoremap <C-t>p :tprevious<CR>

" ============================================
" autocomplpop.vim 
" ============================================
"let g:acp_enableAtStartup = 1
"let g:acp_mappingDriven = 0
"let g:acp_ignorecaseOption = 1
"let g:acp_completeOption = '.,w,b,u,t,k'
"let g:acp_completeoptPreview = 0
"let g:acp_behaviorUserDefinedPattern = '\k$'
"let g:acp_behaviorKeywordCommand = "\<C-n>"
"let g:acp_behaviorKeywordLength = 2
"let g:acp_behaviorFileLength = 0
"let g:acp_behaviorRubyOmniMethodLength = 1
"let g:acp_behaviorRubyOmniSymbolLength = 1
"let g:acp_behaviorPythonOmniLength = 1
"let g:acp_behaviorXmlOmniLength = 1
"let g:acp_behaviorHtmlOmniLength = 1
"let g:acp_behaviorCssOmniPropertyLength = 1
"let g:acp_behaviorCssOmniValueLength = 1
"let g:acp_behaviorSnipmateLength=1

"set omnifunc=syntaxcomplete#Complete

" python
"let g:pydiction_location = '~/.vim/dict/pydiction/complete-dict' 

" ============================================
" smartword.vim 
" ============================================
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)

" ============================================
" manpage view
"=============================================
let g:manpageview_winopen="vsplit="

" ============================================
" Help
" ============================================
nnoremap <C-h>  :<C-u>help<Space>

" ============================================
" taglist.vim
" ============================================
nnoremap ,tl     : Tlist<CR>
nnoremap ,t<C-l> : Tlist<CR>
nmap <silent> ,tt :TlistToggle
nnoremap ,to     : TlistClose<CR>
nnoremap ,t<C-o> : TlistClose<CR>
let Tlist_Use_Horiz_Window=0
let Tlist_Use_Right_Window = 1 "display taglist window on the right
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window
let Tlist_Show_One_File = 1 "show the tag for current file
"let Tlist_Close_On_Select = 1 "close taglist window once we selected something
"let Tlist_File_Fold_Auto_Close = 1
"let Tlist_Inc_Winwidth = 0
"let Tlist_Process_File_Always = 1
"let Tlist_Ctags_Cmd = /path/to/exuberant/ctags
let tlist_objc_settings    = 'objc;i:interface;c:class;m:method;p:property'


" ============================================
" Grep.vim
" ============================================
let Grep_Skip_Dirs = '.git'
let Grep_Skip_Files = '*.bak *~'

" Shortcut to GrepBuffer
command! -nargs=1 Gb :GrepBuffer <args>
" Search word under the cursor
nnoremap ,gb :<C-u>GrepBuffer<Space><C-r><C-w><Enter>

" ============================================
" tag 
" ============================================
nnoremap t  <Nop>
nnoremap tt  <C-]>
nnoremap tj  :<C-u>tag<CR>
nnoremap tk  :<C-u>pop<CR>
nnoremap tl  :<C-u>tags<CR>

" ============================================
" taglist.vim
" ============================================
nnoremap ,tl     : Tlist<CR>
nnoremap ,t<C-l> : Tlist<CR>
nmap <silent> ,tt :TlistToggle
nnoremap ,to     : TlistClose<CR>
nnoremap ,t<C-o> : TlistClose<CR>
let Tlist_Use_Horiz_Window=0
let Tlist_Use_Right_Window = 1 "display taglist window on the right
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window
let Tlist_Show_One_File = 1 "show the tag for current file
"let Tlist_Close_On_Select = 1 "close taglist window once we selected something
"let Tlist_File_Fold_Auto_Close = 1
"let Tlist_Inc_Winwidth = 0
"let Tlist_Process_File_Always = 1
"let Tlist_Ctags_Cmd = /path/to/exuberant/ctags

"=============================================
" git.vim 
"=============================================
let g:git_no_map_default = 1
"let g:git_command_edit = 'rightbelow vnew'
nnoremap ,gd :<C-u>GitDiff<Enter>
nnoremap ,gD :<C-u>GitDiff<Enter>
nnoremap ,gs :<C-u>GitStatus<Enter>
nnoremap ,gl :<C-u>GitLog<Enter>
nnoremap ,gL :<C-u>GitLog -u \| head -10000<Enter>
nnoremap ,ga :<C-u>GitAdd<Enter>
nnoremap ,gA :<C-u>GitAdd <cfile><Enter>
nnoremap ,gc :<C-u>GitCommit<Enter>
nnoremap ,gC :<C-u>GitCommit --amend<Enter>
nnoremap ,gp :<C-u>Git push

" ============================================
" NERDTree
" ============================================
nnoremap ,nt :<C-u>NERDTree<Enter>
nnoremap ,ntt :<C-u>NERDTreeToggle<Enter>


" ============================================
" gundo 
" ============================================
map <leader>g :GundoToggle<CR>


" ============================================
" memolist 
" ============================================
let g:memolist_qfixgrep = 1
map ,ml  :MemoList<CR>
map ,mn  :MemoNew<CR>
map ,mg  :MemoGrep<CR>
nmap ,mf  :FufFile <C-r>=expand(g:memolist_path."/")<CR><CR>

" ============================================
" Yankring
" ============================================
nnoremap <silent> <F3> :YRShow<cr>
inoremap <silent> <F3> <ESC>:YRShow<cr>

" ============================================
" Ack plugin
" ============================================
nnoremap <unique> ,a :exec ':Ack ' . expand('<cword>')<CR>


" ============================================
" wildfire
" ============================================
let g:wildfire_water_map = '<S-Enter>'
let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it', 'i>']


" ============================================
" LPS
" ============================================
let g:lsp_diagnostics_enabled = 0
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
let g:asyncomplete_log_file = expand('~/vim-asyncomplete.log')
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_completion_delay=0
set completeopt+=preview

augroup MyLsp
  autocmd!

  au FileType go,python,typescript call s:configure_lsp()

  if executable('gopls')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'gopls',
          \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
          \ 'whitelist': ['go'],
          \ })
  endif

  
  if executable('pyls')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'pyls',
          \ 'cmd': {server_info->['pyls']},
          \ 'whitelist': ['python'],
          \ })
  endif

  
  if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
      \ 'name': 'javascript support using typescript-language-server',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
      \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},
      \ 'whitelist': ['javascript', 'javascript.jsx'],
      \ })

  endif

augroup END

function! s:configure_lsp() abort
  setlocal omnifunc=lsp#complete
  nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
  nnoremap <buffer> gd :<C-u>LspDefinition<CR>
  nnoremap <buffer> gD :<C-u>LspReferences<CR>
  nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
  nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
  nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
  vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
  nnoremap <buffer> K :<C-u>LspHover<CR>
  nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
  nnoremap <buffer> <F2> :<C-u>LspRename<CR>
endfunction
