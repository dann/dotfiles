*vimshell.txt*	Vim Scriptで実装された強力なシェル

Version: 8.0
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS						*vimshell-contents*

Introduction		|vimshell-introduction|
Install			|vimshell-install|
Interface		|vimshell-interface|
  Commands		  |vimshell-commands|
  Variables		  |vimshell-variables|
  Key mappings		  |vimshell-key-mappings|
Examples		|vimshell-examples|
Internal Commands	|vimshell-internal-commands|
Special Commands	|vimshell-special-commands|
Alter Command		|vimshell-alter-command|
Hook			|vimshell-hook|
Tips			|vimshell-tips|
Create plugin		|vimshell-create-plugin|
ToDo			|vimshell-todo|
Bugs			|vimshell-bugs|
Changelog		|vimshell-changelog|

==============================================================================
INTRODUCTION						*vimshell-introduction*

vimshellは外部のシェルを使わず、100% Vim Scriptによって実装された究極のシェル
です。 ただし、eshellとは違ってまだまだ未完成です。 一番の特徴としては、Vim
のプラグインと連携ができることです。 特にWindowsはシェルが貧弱なので、使用し
ていてイライラしますが、vimshellはWindowsでも動作するので安心です。 ただし
Windows上では一部の機能が制限されるので注意。 加えて、他のシェルの便利な機能
を多数取り込んでいます。 設定して当たり前の機能は標準的に使えるため、zshと比
べて設定の手間もありません。

ただし非同期実行を行わない場合、vimshellはVimのシェル設定を用いてプログラム
を起動します。 よって、シェルは適切に設定しておく必要があります。

ちなみに、使いやすいシェルを目指しているため、変数の規則などが普通のシェルと
異なります。

==============================================================================
USAGE							*vimshell-usage*

vimshellを起動するには、|:VimShell|コマンドを実行します。 これが面倒なら、便
利なキーマッピングも定義されているので使用すると良いでしょう。 一部の相違点
を除けば、vimshellは他のシェルと同じように動作します。 よって、すぐに使い始
めることができるでしょう。 ただし、vimshellは\をエスケープシーケンスとして認
識します。 たとえWindows環境であってもパスは/を用いなければなりません。

vimshellは初期化ファイルとして、.vimshrcを読み込みます。
aliasの設定はそこで行っておくと便利です。

==============================================================================
INSTALL							*vimshell-install*

http://github.com/Shougo/vimshell/tree/master より、配布ファイルをそのフォルダ
ごとVimの'runtimepath'にコピーします。

さらに、vimshellを使用するにはvimprocが必要です。

私がvimshell用に修正したvimprocがあるので、それをリポジトリから取ってきます。
http://github.com/Shougo/vimproc
そしてproc.soをmakeします。

Make方法

* Mingw: >
	$ make -f make_mingw.mak

* Mac OS X: >
	$ make -f make_mac.mak

* Linux BSD: >
	$ make -f make_gcc.mak

* Visual Studio: >
	$ make -f make_msvc.mak

* Cygwin: >
	$ make -f make_cygwin.mak

コンパイルが通ったら、autoloadにあるvimproc.vim, vimproc/parser.vimとproc.soを
.vimのautoloadディレクトリにコピーします。Cygwinでコンパイルしたproc.dllは
Cygwin上のVim専用です。WindowsのVimでは使えません。注意してください。

==============================================================================
INTERFACE						*vimshell-interface*

------------------------------------------------------------------------------
COMMANDS 						*vimshell-commands*

:VimShell {path}					*:VimShell*
			{path}をカレントディレクトリとして、vimshellを起動し
			ます。他のvimshellが起動している場合、そのvimshell
			にスイッチし、カレントディレクトリを{path}に変更しま
			す。{path}を省略した場合、vimshellのカレントディレ
			クトリは変更されません。

:VimShellCreate {path}					*:VimShellCreate*
			|:VimShell|と同じですが、他のvimshellが起動している
			場合でも、新しいvimshellバッファを作成します。

:VimShellTab {path}					*:VimShellTab*
			|:VimShellCreate|と同じですが、新しいタブを生成します。

:VimShellPop {path}					*:VimShellPop*
			|:VimShell|と同じですが、こちらは小さいウインドウを
			ポップアップします。ちょっとだけvimshellの機能を使
			いたいときに便利です。ウインドウを分割する高さは
			|g:vimshell_split_height|で決定されます。

:VimShellExecute {command}				*:VimShellExecute*
			vimshellを起動せずに、{command}で指定された実行
			ファイルをバックグラウンドで起動します。vimshellを
			GNU screenのように使えます。

:VimShellInteractive [{command}]			*:VimShellInteractive*
			vimshellを起動せずに、{command}で指定された
			インタプリタを起動します。EmacsのM-x 
			{interpreter-name}のように使えます。{command}
			を省略すると、
			|g:vimshell_interactive_interpreter_commands|の値が
			使われます。

:VimShellTerminal {command}				*:VimShellTerminal*
			vimshellを起動せずに、{command}で指定された端末
			プログラムを起動します。Emacsのansi-termのように使え
			ます。ただしまだ未完成です。

:VimShellSendString {string}				*:VimShellSendString*
			裏ウインドウのインタプリタに選択文字列を送信します。
			まるで|quickrun|を使っているかのようにインタプリタを
			操作できます。

:VimShellSendBuffer {bufname}				*:VimShellSendBuffer*
			裏ウインドウを{bufname}として設定します。{bufname}が
			画面に表示されていない場合、自動的に開きます。

------------------------------------------------------------------------------
VARIABLES 						*vimshell-variables*

g:vimshell_prompt					*g:vimshell_prompt*
			vimshellのプロンプト文字列を設定します。これは一度し
			か評価されません。
			
			セキュリティの関係上、vimshellの関数を呼び出す前に値
			を設定しなければ無効になります。
			初期値は'vimshell% 'です。

g:vimshell_user_prompt					*g:vimshell_user_prompt*
			この変数にVim Scriptの式を文字列として代入することで、
			ユーザーが追加で表示されるプロンプトを定義できます。
			|g:vimshell_prompt|と違い、固定文字列でなくても良いです。
			ユーザープロンプトを\nで区切ることで、 複数行のユー
			ザープロンプトが表示できます。
			
			例えば、このように毎回カレントディレクトリを表示する
			ようにすれば便利です。
>
			let g:vimshell_user_prompt = 'getcwd()'
<
			セキュリティの関係上、vimshellの関数を呼び出す前に値
			を設定しなければ無効になります。
			初期値は空です。

g:vimshell_right_prompt					*g:vimshell_right_prompt*
			zsh風の右プロンプトです。Vim Scriptの式を文字列とし
			て代入します。|g:vimshell_user_prompt|に似ていますが、
			ウインドウの大きさを計算し、自動的に最適な位置にプロ
			ンプトを表示します。
>
			let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
<
			セキュリティの関係上、vimshellの関数を呼び出す前に値
			を設定しなければ無効になります。
			初期値は空です。

g:vimshell_no_default_keymappings			*g:vimshell_no_default_keymappings*
			vimshellのデフォルトマッピングをすべて無効化します。
			新しくマッピングしない限り、vimshellの機能が使えなく
			なるので、初心者にはお勧めできません。内部動作を知
			り尽くしている上級者向けのオプションです。

g:vimshell_ignore_case					*g:vimshell_ignore_case*
			vimshellが補完候補を検索する際に、大文字小文字を無視
			するかを制御します。
			
			初期値は&ignorecaseです。

g:vimshell_smart_case					*g:vimshell_smart_case*
			このオプションが有効だと、vimshellが補完候補を検索す
			る際に、大文字が入力されていれば大文字小文字を無視
			しなくなります。
			
			初期値は0です。

g:vimshell_max_list					*g:vimshell_max_list*
			vimshellの補完候補の最大数です。補完候補の数がこれを
			越えると、勝手に候補を切り詰めます。
			
			初期値は100です。

g:vimshell_use_ckw					*g:vimshell_use_ckw*
			|vimshell-internal-shell|を実行する際に、ckwを利用し
			てシェルを起動するかどうかを制御します。 Windows環境
			以外では無視されます。
			
			初期値は0です。

g:vimshell_split_height					*g:vimshell_split_height*
			|:VimShellPop|の分割高さを指定します。指定する値は
			|winheight(0)|に対するパーセントになります。
			
			初期値は30です。

g:vimshell_temporary_directory				*g:vimshell_temporary_directory*
			vimshellが使用する一時ディレクトリを指定します。ヒス
			トリファイルもこのディレクトリ下に保存されます。
			
			初期値はexpand('~/.vimshell')です。

g:vimshell_max_command_history				*g:vimshell_max_command_history*
			vimshellが保存するヒストリの最大数を指定します。
			
			初期値は1000です。

g:vimshell_max_directory_stack				*g:vimshell_max_directory_stack*
			vimshellが保存するディレクトリスタックの最大数を指定します。
			
			初期値は100です。

g:vimshell_vimshrc_path					*g:vimshell_vimshrc_path*
			vimshellが最初に読み込むシェルの設定ファイル.vimshrc
			を指定します。これはbashでいう.bashrcのことです。そ
			のファイルの中でエイリアスを定義すると便利でしょう。
			
			初期値はexpand('~/.vimshrc')です。

g:vimshell_escape_colors				*g:vimshell_escape_colors*
			エスケープシーケンスの色づけにおいて、 対応する色の
			リストです。0~8番目が普通の色、9~15番目が高輝度の色
			に対応しています。
			
			初期値はplugin/vimshell.vimを参照してください。

g:vimshell_disable_escape_highlight			*g:vimshell_disable_escape_highlight*
			エスケープシーケンスの色づけをするかどうかを制御しま
			す。これは重い処理なので、無効化すればvimshellが高速
			化します。値を真にすると無効になります。
			
			初期値は0です。

g:vimshell_cat_command					*g:vimshell_cat_command*
			vimshellは外部のページャやエディタをうまく扱えないの
			で、$PAGERや$EDITORに|g:vimshell_cat_command|の値を
			セットします。初期値は"cat"ですが、この変数の内容を
			変更することで、カスタマイズできます。
			
			初期値は"cat"です。

g:vimshell_environment_term				*g:vimshell_environment_term*
			vimshellが$TERMにセットする端末情報です。
			
			初期値は"vt100"です。

g:vimshell_split_command				*g:vimshell_split_command*
			vimshellが画面を分割するときに用いるExコマンドです。
			これを空にすると、vimshellがウインドウの大きさを見て
			最適な画面分割を行います。
			
			初期値は""です。

g:vimshell_cd_command					*g:vimshell_cd_command*
			vimshellがカレントディレクトリを変更するときに用いるEx
			コマンドです。
			
			初期値は"lcd"です。

g:vimshell_external_history_path			*g:vimshell_external_history_path*
			vimshellが履歴検索に使用する外部シェルの履歴ファイル
			へのパスです。これを空にすると無視されます。zshの拡
			張履歴ファイルも自動認識します。
			
			初期値は""です。

g:vimshell_no_save_history_commands			*g:vimshell_no_save_history_commands*
			ヒストリを保存しないコマンド名をキーとしたディクショ
			ナリです。存在しないと無視されます。
			
			初期値は{ 'history' : 1, 'h' : 1, 'histdel' : 1 }です。

g:vimshell_interactive_no_save_history_commands		*g:vimshell_interactive_no_save_history_commands*
			|vimshell-internal-iexe|において、ヒストリを保存しな
			いコマンド名をキーとしたディクショナリです。存在しな
			いと無視されます。
			
			初期値は{}です。

g:vimshell_interactive_update_time			*g:vimshell_interactive_update_time*
			|vimshell-internal-iexe|がInsert mode中において、自
			動更新を行うタイミングを制御します。
			|vimshell-internal-iexe|はこのオプションに基づき、
			'updatetime'を変更します。
			
			初期値は500です。

g:vimshell_interactive_command_options			*g:vimshell_interactive_command_options*
			コマンド名をキーとするディクショナリ変数になっていて、
			|vimshell-internal-iexe|で起動するコマンドに与えるオ
			プションを指定します。 Windows環境などで特殊なオプショ
			ンを与えないと、うまく対話モードにならないコマンド
			に使用します。
			
			初期値は複雑なので、autoload/vimshell/commands/iexe.vimを参照
			してください。

g:vimshell_interactive_interpreter_commands		*g:vimshell_interactive_interpreter_commands*
			ファイルタイプをキーとするディクショナリ変数になっていて、
			|:VimShellInteractive|の引数を省略した際のインタプリ
			タ名を指定します。
			
			初期値は複雑なので、autoload/vimshell/commands/iexe.vimを参照
			してください。

g:vimshell_interactive_encodings			*g:vimshell_interactive_encodings*
			コマンド名をキーとするディクショナリ変数になっていて、
			|vimshell-internal-iexe|で起動するコマンドのエンコー
			ディングを指定します。
			
			初期値は複雑なので、autoload/vimshell/commands/iexe.vimを参照
			してください。

g:vimshell_interactive_no_echoback_commands		*g:vimshell_interactive_no_echoback_commands*
			インタプリタ名をキーとするディクショナリ変数になってい
			て、|vimshell-internal-iexe|実行時にエコーバックするか
			どうかを指定します。1ならiexe側でエコーバック処理をしま
			す。Windowsでのみ有効。
			
			初期値は複雑なので、plugin/vimshell.vimを参照
			してください。

g:vimshell_terminal_cursor				*g:vimshell_terminal_cursor*
			|vimshell-internal-texe|で使用するカーソル形状を指定
			します。'guicursor'を一時的に変更するので、GVim環境
			でのみ意味があります。
			
			初期値は'i:block-Cursor/lCursor'です。

g:vimshell_terminal_commands				*g:vimshell_terminal_commands*
			コマンド名をキーとするディクショナリ変数となっている。
			値が真であるコマンドを実行する際には、自動的に|vimshell-internal-texe|が使用される。
			
			初期値は複雑なので、plugin/vimshell.vimを参照
			してください。

g:vimshell_interactive_cygwin_commands			*g:vimshell_interactive_cygwin_commands*
			コマンド名をキーとするディクショナリ変数になっていて、
			fakecygpty経由で起動するコマンドを指定します。sshな
			ど、Cygwin上でないとうまく動作しないコマンドを
			|vimshell-internal-iexe|から使 用する際に使います。
			fakecygptyについては、|vimshell-tips-fakecygpty|を
			参照してください。
			
			初期値は複雑なので、autoload/vimshell/commands/iexe.vimを参照
			してください。

g:vimshell_interactive_cygwin_path			*g:vimshell_interactive_cygwin_path*
			fakecygpty経由のプログラムを実行する際に参照するパス
			を指定します。 |vimshell-internal-iexe|は第一引数に
			fakecygptyを指定されたとき、 $PATHではなく、
			|g:vimshell_interactive_cygwin_path|からコマンドを検
			索します。
			
			初期値は'c:/cygwin/bin'です。

g:vimshell_interactive_cygwin_home			*g:vimshell_interactive_cygwin_home*
			fakecygpty経由のプログラムを実行する際に使用する
			$HOMEを指定します。''を指定すると現在の$HOMEをそのま
			ま利用します。
			
			初期値は''です。

g:vimshell_vcs_print_null				*g:vimshell_vcs_print_null*
			これが0以外のとき、vimshellの|vimshell-tips-vcs_info|
			において、利用できるVCSプラグインが存在しないとき、
			'[novcs]-(noinfo)'と表示します。
			
			初期値は0です。

g:vimshell_enable_auto_slash				*g:vimshell_enable_auto_slash*
			これが0以外のとき、ディレクトリの補完時に/を補います。
			
			初期値は0です。

------------------------------------------------------------------------------
KEY MAPPINGS 						*vimshell-key-mappings*

<Plug>(vimshell_split_switch)				*<Plug>(vimshell_split_switch)*
			vimshellを画面分割して起動します。すでにvimshellバッファ
			が存在する場合はそちらに切り換えます。

<Plug>(vimshell_split_create)				*<Plug>(vimshell_split_create)*
			vimshellを画面分割して起動します。すでにvimshellバッファ
			が存在していても、新しくvimshellバッファを作成します。

<Plug>(vimshell_switch)					*<Plug>(vimshell_switch)*
			vimshellを起動します。すでにvimshellバッファ が存在
			する場合はそちらに切り換えます。

<Plug>(vimshell_create)					*<Plug>(vimshell_create)*
			vimshellを起動します。すでにvimshellバッファ
			が存在していても、新しくvimshellバッファを作成します。

------------------------------------------------------------------------------
BUFFER KEY MAPPINGS 					*vimshell-buffer-key-mappings*

vimshellバッファで使えるキーマッピングについては、
autoload/vimshell/mappings.vimのvimshell#mappings#define_default_mappings()
を参照せよ。

------------------------------------------------------------------------------
INTERACTIVE KEY MAPPINGS 				*vimshell-interactive-key-mappings*

interactiveバッファで使えるキーマッピングについては、
autoload/vimshell/int_mappings.vimのvimshell#int_mappings#define_default_mappings()
を参照せよ。

------------------------------------------------------------------------------
TERMINAL KEY MAPPINGS 					*vimshell-terminal-key-mappings*

terminalバッファで使えるキーマッピングについては、
autoload/vimshell/term_mappings.vimのvimshell#term_mappings#define_default_mappings()
を参照せよ。

==============================================================================
EXAMPLES						*vimshell-examples*
>
	let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
	let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
	let g:vimshell_enable_smart_case = 1
	
	if has('win32') || has('win64') 
	  " Display user name on Windows.
	  let g:vimshell_prompt = $USERNAME."% "
	else
	  " Display user name on Linux.
	  let g:vimshell_prompt = $USER."% "
	
	  call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
	  call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
	  let g:vimshell_execute_file_list['zip'] = 'zipinfo'
	  call vimshell#set_execute_file('tgz,gz', 'gzcat')
	  call vimshell#set_execute_file('tbz,bz2', 'bzcat')
	endif
	
	autocmd FileType vimshell
	\ call vimshell#altercmd#define('g', 'git')
	\| call vimshell#altercmd#define('i', 'iexe')
	\| call vimshell#altercmd#define('l', 'll')
	\| call vimshell#altercmd#define('ll', 'ls -l')
	\| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
	\| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
	\| call vimshell#hook#set('preprompt', ['g:my_preprompt('])
	\| call vimshell#hook#set('preexec', ['g:my_preexec'])

	function! g:my_chpwd(args, context)
	  call vimshell#execute('echo "chpwd"')
	endfunction
	function! g:my_emptycmd(cmdline, context)
	  call vimshell#execute('echo "emptycmd"')
	  return a:cmdline
	endfunction
	function! g:my_preprompt(args, context)
	  call vimshell#execute('echo "preprompt"')
	endfunction
	function! g:my_preexec(cmdline, context)
	  call vimshell#execute('echo "preexec"')
	
	  if a:cmdline =~# '^\s*diff\>'
	    call vimshell#set_syntax('diff')
	  endif
	  return a:cmdline
	endfunction
<
プロンプトをユーザー名にしているだけで、後は凝った設定はしてないです。 ちな
みに|neocomplcache|では、vimshellのヒストリファイルを辞書として使用してます。
これはなかなか便利です。|g:vimshell_execute_file_list|による関連づけも設定
しています。 ユーザープロンプトを設定するのは一番最初にします。 vimshellを読
み込む前に設定しないと、セキュリティの関係で再設定できなくなるからです。

==============================================================================
INTERNAL COMMANDS					*vimshell-internal-commands*
internal commandは普通のシェルにおける内部コマンドのように動作します。
引数はvimshellに解釈された後に分割して渡されます。

bcd {buffer-name}					*vimshell-internal-bcd*
		{buffer}のディレクトリへ移動します。

bg [{option}...] {command}				*vimshell-internal-bg*
		{command}をバックグラウンドで起動します。vimshellの
		バックグラウンド実行は新たにバッファを開き、そこに{command}
		の出力を書き出します。 bgの場合、ユーザーからの入力は一切受け
		付けません。 バックグラウンドバッファ上で<C-c>を入力すると、
		{command}の実行を強制的に終了させます。
		iexe, exe, bg, texe, less はオプションを解釈し、それに基づい
		て挙動を変更します。詳しくは |vimshell-execute-options|を参
		照してください。
		ここでは、bgのみに存在するオプションを解説します。
		
		--filetype = {filetype-name}
		出力バッファの'filetype'を{filetype-name}に変更します。
		このオプションが省略された場合、"background"となります。

cd {directory-path} [{substitute-pattern}]		*vimshell-internal-cd*
		カレントディレクトリを{directory-path}に変更します。
		引数が空の場合、ホームディレクトリへ移動します。 引数が二つ
		与えられた場合、{directory-path}を {substitute-pattern}へ置
		き換えます。 引数がディレクトリでなかった場合、ファイルの親
		ディレクトリへ移動します。 ファイルが見つからなかった場合、
		'cdpath'を参照して移動しようとします。 引数に-で始まる数字を
		与えると、 |vimshell-internal-popd|と同じ意味になります。

clear 							*vimshell-internal-clear*
		画面を消去します。

dirs [{max}]						*vimshell-internal-dirs*
		ディレクトリスタックの一覧を{max}個表示します。
		{max}を省略すると、10になります。
		この一覧上で<Enter>を押すことで、そのディレクトリへ移動でき
		ます。

echo [{argument}...]					*vimshell-internal-echo*
		引数を出力します。

eval {expression}					*vimshell-internal-eval*
		{expression}をvimshell Scriptとして解釈し、評価結果を表示します。
		前のバージョンのevとは動作が違います。evの代わりが欲しいなら、
		alias ev = 'vexe echo'を設定しましょう。

exe [{option}...] {command} 				*vimshell-internal-exe*
		{command}に引数を与えて実行します。必ず外部コマンドが実行さ
		れます。
		iexe, exe, bg, texe, less はオプションを解釈し、それに基づい
		て挙動を変更します。詳しくは |vimshell-execute-options|を参
		照してください。
		
							*vimshell-execute-options*
		--encoding = {encoding-name}		*vimshell-execute-options-encoding*
		起動するプログラムのエンコーディングを{encoding-name}に変更
		します。 'encoding'と{encoding-name}が異なる場合、vimshellは
		入出力のエンコーディング変換を自動的に行います。 このオプショ
		ンが省略された場合、'termencoding'の値が使用されます。

exit 							*vimshell-internal-exit*
		vimshellを終了します。

gcd [{directory-path}]					*vimshell-internal-gcd*
		vimshellのカレントディレクトリを変更し、かつグローバルなカレ
		ントディレクトリも変更します。 vimshellのカレントディレクト
		リはVimのカレントディレクトリとは異なっているので、 Vimのカ
		レントディレクトリを変更したい場合に便利でしょう。
		{directory-path}を省略すると、vimshellのカレントディレクトリ
		に移動します。

gexe {command} 						*vimshell-internal-gexe*
		{command}に引数を与えて実行します。必ず外部コマンドが実行さ
		れます。exeとは違い、GUIコマンドを実行することに特化していま
		す。

h [{pattern}]						*vimshell-internal-h*
		{pattern}に一致するヒストリを実行します。{pattern}が数字で
		与えられた場合、{pattern}をヒストリ番号として検索します。
		{pattern}が文字列の場合、その文字列に最初にマッチする履歴を
		実行します。ヒ ストリ番号は|vimshell-internal-history|で確認
		できます。{pattern}を省略すると、 直前のコマンドを実行しま
		す。|vimshell-internal-h|により実行したコマンドはヒストリに
		登録 されません。

histdel {history-number}				*vimshell-internal-histdel*
		{history-number}に一致するヒストリを削除します。ヒストリ番
		号は|vimshell-internal-history|で確認できます。
		{history-number}を省略すると、 無視されます。

history [{search-string}]				*vimshell-internal-history*
		ディレクトリスタックの一覧を{search-string}個表示します。
		{search-string} を省略すると、20になります。{search-string}
		が文字列の場合、その文字 列にマッチする候補を一覧できます。
		この一覧上で<Enter>を押す ことで、その履歴を実行できます。

iexe [{options}...] {command}				*vimshell-internal-iexe*
		{command}に引数を与えて実行します。必ず外部コマンドが実行さ
		れます。exeとは違い、対話コマンドを実行することに特化しています。
		入出力を行なうために新しいバッファが生成されます。パイプを使
		うとエラーになります。
		iexe, exe, bg, texe, less はオプションを解釈し、それに基づい
		て挙動を変更します。詳しくは |vimshell-execute-options|を参
		照してください。

less [{options}...] {command}				*vimshell-internal-less*
		{command}に引数を与えて実行します。必ず外部コマンドが実行さ
		れます。vimshellがページャとなります。出力が多いコマンドを実行するときに有用です。
		シンタックスシュガーとして、次の形式も有効です。
		{command1} | {command2} | less
		入出力を行なうために新しいバッファが生成されます。
		iexe, exe, bg, texe, less はオプションを解釈し、それに基づい
		て挙動を変更します。詳しくは |vimshell-execute-options|を参
		照してください。

ls [{argument}...]					*vimshell-internal-ls*
		外部コマンドのlsを適切な引数を与えて実行します。

mkcd {directory-name}					*vimshell-internal-mkcd*
		{directory-name}を作成してから、そのディレクトリへ
		|vimshell-internal-cd|します。

nop 							*vimshell-internal-nop*
		何もしません。

open {filename}						*vimshell-internal-open*
		{filename}を関連付け実行します。何が実行されるかはOSやデスク
		トップ環境に依存します。

popd [{directory-stack-number}]				*vimshell-internal-popd*
		{directory-stack-number}で示されるディレクトリへ移動します。
		{directory-stack-number}は|vimshell-internal-dirs|で確認でき
		ます。{directory-stack-number}を省略すると、0になります。
		他のシェルとは異なり、重複しない候補はpopdからは取り除かれません。

pwd 							*vimshell-internal-pwd*
		vimshellのカレントディレクトリを表示します。

repeat {cnt} {command}					*vimshell-internal-repeat*
		{command}を{cnt}回実行します。

shell 							*vimshell-internal-shell*
		|:shell|を用いて'shell'を起動します。Windows上のGVimでかつ
		|g:vimshell_use_ckw|が設定されている場合、DOSプロンプトでは
		なく、ckw上でシェルを起動します。シグナルやトラップなど、
		vimshellでは対応できない用途にも対応することができます。

sudo {command}						*vimshell-internal-sudo*
		管理者権限が必要な外部コマンドを実行します。{command}がvimの
		場合、|sudo.vim|を用いて編集しようとします。
		
		Windows環境ではsudo.exeが必要です。
		http://bitbucket.org/wantora/sudo/wiki/Home

texe [{options}...] {command}				*vimshell-internal-texe*
		{command}に引数を与えて実行します。必ず外部コマンドが実行さ
		れます。exe, iexeとは違い、端末コマンドを実行することに特化
		しています。入出力を行なうために新しいバッファが生成されます。
		パイプを使うとエラーになります。このコマンドは、まだ動作が不
		完全です。
		iexe, exe, bg, texe, less はオプションを解釈し、それに基づい
		て挙動を変更します。詳しくは |vimshell-execute-options|を参
		照してください。

vexe {expression}					*vimshell-internal-vexe*
		{expression}をVim Scriptの文として実行し、出力をvimshellバッ
		ファに書き出します。

view {filename} [{pattern}]				*vimshell-internal-view*
		{filename}を読み取り専用で別バッファに開きます。ファイルの行
		数がウインドウサイズよりも少ない場合、 別バッファを開かず、
		catのように動作します。ファイルの中身をちょっと見てみたいと
		きに便利です。
		{pattern}を指定すると、その{pattern}を検索して現在位置とします。

vim [{filename} [{pattern}]]				*vimshell-internal-vim*
		{filename}を別バッファに開きます。カレントディレクトリにある
		ファイルを手軽に編集したいときに便利です。
		{filename}を省略すると、無名バッファを開きます。
		{pattern}を指定すると、その{pattern}を検索して現在位置とします。

vimdiff {filename1} {filename2}				*vimshell-internal-vimdiff*
		{filename1}と{filename2}を|:vimdiff|で比較します。vimshellか
		らいちいちdiffを呼び出すのは不便なので、存分に活用しましょう。

vimsh [{filename}]					*vimshell-internal-vimsh*
		{filename}で表されるvimshellスクリプトファイルを実行します。
		ただし制御構造が実装されていないため、あまり使用価値はありま
		せん。{filename}を省略すると、新しいvimshellバッファを開きま
		す。

which {command}					*vimshell-internal-which*
		{command}のフルパスを出力します。aliasも認識されます。

whrereis {command}				*vimshell-internal-whereis*
		{command}のフルパスをすべて出力します。

==============================================================================
SPECIAL COMMANDS					*vimshell-special-commands*
special commandはinternal commandとは違い、vimshellが最小限の解釈しかせずに、
コマンドに制御が渡ります。それだけ柔軟な解釈ができますが、引数をパースするのは
それぞれのコマンドの責任となります。

alias {alias-name} = {command}				*vimshell-special-alias*
		vimshellにaliasを定義します。vimshellは{alias-name}がコマン
		ド名として使用されると、 自動的に{command}に置き換えます。普
		通のシェルとは違い、 = の前後に空白があっても動作します。

galias {global-alias-name} = {command}			*vimshell-internal-galias*
		vimshellにグローバルなaliasを定義します。vimshellは
		{global-alias-name}がコマン ドライン中に現われると、自動的に
		{command}に置き換えます。|vimshell-internal-alias|とは違い、
		引数でも展開されます。zshのグローバルエイリアスと良く似た機
		能です。
		
		ただし、現状次のようなパイプ付きの展開がサポートされていません。
>
		vimshell% galias G = '|grep'
		vimshell% ls G hoge
<
let ${var-name} = {expression}				*vimshell-special-let*
		{var-name}の変数へ{expression}を代入します。
		{var-name}の先頭には$を付加しなければなりません。
		シェル変数はそれぞれのvimshellバッファ固有の変数です。
		
		環境変数に代入するには、変数名の先頭を大文字にします。
>
		vimshell% let $Hoge = $hoge
<
		普通のシェルと違って、 = の間に空白があってもなくても動作し
		ます。代入する式はVim scriptとなっているので、計算も自由自
		在です。ただしvimshellでは変数名の頭に必ず$を付けなければな
		りません。コマンドの終了ステータスは$$statusに書き込まれま
		す。$$で始まる変数はvimshellの内部変数です。

sexe {command}						*vimshell-special-sexe*
		{command}を'shell'上で実行します。 vimshellでの起動に不具合
		があるときに使用します。 'shell'が適切に設定されていないと動
		作がおかしくなります。Windows環境では一瞬DOS窓が表示されてし
		まいます。

==============================================================================
ALTER COMMAND						*vimshell-alter-command*

kana氏の作成したaltercmd.vim[http://github.com/kana/vim-altercmd]というものがあります。
これはCommand line-modeでのコマンド名においてのみ展開される特殊なエイリアスです。
普通のエイリアスよりも、誤爆しにくいという利点があります。

それをvimshell上にも実装しました。vimshellにもエイリアス機能がありますが、
altercmd機能を用いると、展開結果が一目で分かります。
本家とは違い、altercmdの再帰的展開にも対応しています。

使用方法は、vimshellバッファ上で|vimshell#altercmd#define|を呼びだします。
autocmd FileTypeを使用すると、楽に定義できるでしょう。
>
	autocmd FileType vimshell
	\ call vimshell#altercmd#define('g', 'git')
<
==============================================================================
HOOK							*vimshell-hook*

vimshellには関数がまだありませんが、決められたフック地点でVim Scriptの関数が
呼べるため、 vimshellの内部構造を熟知していれば、より柔軟な処理ができます。

次の例では、chpwdにフックを設定し、カレントディレクトリ移動時にlsを実行する
ようにしています。
>
	autocmd FileType vimshell
	\ call vimshell#hook#set('chpwd', ['g:my_chpwd'])
	
	function! g:my_chpwd(args, context)
		call vimshell#execute('ls')
	endfunction
<
vimshellでは次のようなフック地点が用意されています。 フック地点の名前は、
bashやzshに存在するフック関数名と似せてあります。 フック関数はargsという引数
を表すディクショナリ変数と、contextというコンテキスト情報を引数に取ります。
フィルターとして動作する、一部のフック関数はcmdlineを第一引数に取ります。
|vimshell#hook#set()|の第二引数は関数名のリストとなっていて、ここで指定され
た順番で関数が呼び出されます。

chpwd							*vimshell-hook-chpwd*
		vimshellのカレントディレクトリが変更されるときに呼びだされます。

preparse						*vimshell-hook-preparse*
		エイリアスのパース前に呼びだされます。第一引数はcmdlineとい
		うコマンドライン文字列で、戻り値は変更後のコマンドライン文字
		列です。

preexec							*vimshell-hook-preexec*
		エイリアスのパース後、コマンドの実行前に呼びだされます。第一
		引数はcmdlineというコマンドライン文字列で、戻り値は変更後の
		コマンドライン文字列です。

emptycmd						*vimshell-hook-emptycmd*
		コマンド名が空のときに呼びだされます。第一引数はcmdlineとい
		うコマンドライン文字列で、戻り値は変更後のコマンドライン文
		字列です。

notfound						*vimshell-hook-notfound*
		コマンドが存在しないときに呼びだされます。第一引数はcmdline
		というコマンドライン文字列で、戻り値は変更後のコマンドライ
		ン文字列です。

preprompt						*vimshell-hook-preprompt*
		コマンド実行後、プロンプト表示前に呼びだされます。

==============================================================================
TIPS							*vimshell-tips*
ここでは、その他の便利機能について紹介します。

ディレクトリスタック					*vimshell-tips-directory-stack*
		vimshellでは、bashやzshのようなディレクトリスタックを完備し
		ています。しかも何も設定せずにauto_pushdしてくれるので、
		pushdコマンドは存在しません。ディレクトリスタックを参照する
		には|vimshell-internal-dirs|コマンド、ディレクトリスタックか
		ら|vimshell-internal-cd|するには |vimshell-internal-popd|コ
		マンドを使います。他のシェルと同様に、"cd -"でも
		|vimshell-internal-popd|と同じ動作になります。

auto_cd							*vimshell-tips-auto_cd*
		ディレクトリ名で実行すると、そのディレクトリに移動します。
		zshの機能を移植しました。例えば、..で上のディレクトリへ移動
		できます。 zshとは違い、特に設定せずに使えます。

ブロック						*vimshell-tips-block*
		ブロック構文もサポートしています。
>
		vimshell% echo /hoge/piyo/{hoge,hogera}
		-> /hoge/piyo/hoge /hoge/piyo/hogera
<
		zshの機能を移植しました。例えば、..で上のディレクトリへ移動
		できます。 zshとは違い、特に設定せずに使えます。
		zshのような数値展開も実装しているので、zshを超えるのももう少
		しかもしれません。
>
		vimshell% echo {00..09}
		-> 00 01 02 03 04 05 06 07 08 09
<
ワイルドカード						*vimshell-tips-wildcard*
		ワイルドカードも普通に使えます。指定されたファイルが存在し
		ない場合、zshのようにエラーになります。
>
		vimshell% ls *.htm
<
		ワイルドカードの除外もサポートしました。
>
		vimshell% ls *~*.htm
<
		'~'で区切ってパターンを記述することで、「パターンを除外したパターン」
		という意味になります。

バッククオート						*vimshell-tips-backquote*
		コマンドの引数にコマンドの実行結果が使えます。
>
		vimshell% echo `ls`
<
		Vim scriptの埋め込みもできます。
>
		vimshell% echo `=3`
<

fakecygpty						*vimshell-tips-fakecygpty*
		fakecygptyとはKyotaro Horiguchiさんが開発した、Windowsの
		パイプとCygwinのptyを接続させて動作させるためのコマンドです。
		例えば、次のコマンドでCygwinのsshと接続できます。
>
		> fakecygpty ssh
<
		Meadowのソースコードに含まれていて探すのが大変なので、私が
		ソースコードを再配布しています。
		http://github.com/Shougo/fakecygpty
		自分でコンパイルするには、Cygwin環境上で
>
		$ gcc fakecygpty.c -o fakecygpty.exe
<
		というコマンドを実行します。あとはfakecygptyを$PATHの通った
		ところに置けば準備完了です。
>
vcs_info						*vimshell-tips-vcs-info*

		vimshellには、zshが実装しているようなVCSとの連携機能がありま
		す。標準ではgitにしか対応していませんが、プラグインを追加す
		ることで、さまざまなVCSに対応できます。
>
		let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
<
		たとえば、このようにvimshellの右プロンプトにVCSの情報を表示
		できます。フォーマットはzshのvcs_infoに準拠しています。

==============================================================================
CREATE PLUGIN						*vimshell-create-plugin*

vimshellの内部コマンドとして、autoload/internal/以下にある*.vimファイルを読
み込むため、 自分でそこにプラグインファイルを追加することで、簡単にコマンド
が追加できます。

==============================================================================
TODO							*vimshell-todo*

==============================================================================
BUGS							*vimshell-bugs*

==============================================================================
CHANGELOG						*vimshell-changelog*

doc/vimshell.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:isk+=-:
