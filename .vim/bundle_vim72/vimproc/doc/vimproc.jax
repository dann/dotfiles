*vimproc.jax*	Vim用非同期実行ライブラリ

Version: 5.0
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*vimproc-contents*

Introduction		|vimproc-introduction|
Install			|vimproc-install|
Interface		|vimproc-interface|
  Commands		  |vimproc-commands|
  Functions		  |vimproc-functions|
  Variables		  |vimproc-variables|
Examples		|vimproc-examples|
ToDo			|vimproc-todo|
Bugs			|vimproc-bugs|
Changelog		|vimproc-changelog|

==============================================================================
INTRODUCTION					*vimproc-introduction*

|vimproc|とはYukihiro Nakadairaさんが開発し、現在私が保守作業を行っている、
優れた非同期実行ライブラリである。
|vimproc|では外部のシェルを使わず、外部DLLを用いて非同期実行処理を実装している
。Python等の外部インタフェースを使う場合と比較して、マルチスレッド化はできない
が、安定性に優れ、外部のインタプリタのバージョンに依存しない。

==============================================================================
INSTALL						*vimproc-install*

まず、vimprocをリポジトリから取得する。
[http://github.com/Shougo/vimproc/tree/master](http://github.com/Shougo/vimproc/tree/master)

そして外部ライブラリである、proc.so(proc.dll)をmakeする。vimprocは
proc.so(proc.dll)の機能に依存しているので、proc.so(proc.dll)が存在しないとエラ
ーになる。Cygwinでコンパイルしたproc.dllはCygwin上のVim専用なので、WindowsのVim
では使えない。

Make方法
* Mingw: >
	$ make -f make_mingw.mak

* Mac OS X: >
	$ make -f make_mac.mak

* Linux BSD: >
	$ make -f make_gcc.mak

* Visual Studio: >
	$ make -f make_msvc.mak

* Cygwin: >
	$ make -f make_cygwin.mak

コンパイルが通ったら、autoload/にあるファイルやディレクトリを.vimのautoloadディ
レクトリにコピーする。 doc/にあるのはヘルプファイルである。Windowsユーザーでコ
ンパイルするのが嫌な場合は、githubのダウンロードに32bit版のproc.dllファイルがあ
る。ただし動作の保証はしない。
http://github.com/Shougo/vimproc/downloads

==============================================================================
INTERFACE					*vimproc-interface*

------------------------------------------------------------------------------
COMMANDS 					*vimproc-commands*

:VimProcBang {path}					*:VimProcBang*
			{path}で指定された実行ファイルを起動し、結果を:echoで表
			示する。|:!|の代わりになる。

:VimProcRead {path}					*:VimProcRead*
			{path}で指定された実行ファイルを起動し、結果をカーソル
			行に追記する。|:read|の代わりになる。

------------------------------------------------------------------------------
FUNCTIONS 					*vimproc-functions*

vimproc#version()				*vimproc#version()*
		vimprocのバージョン番号を文字列形式で返す。vimproc Ver.4未満
		には存在しない。番号は|v:version|のように、メジャーバージョ
		ン * 100 + マイナーバージョンという形式になっている。Ver.4な
		らば400である。 Ver.4.1なら401である。

vimproc#open({filename})			*vimproc#open()*
		{filename}をシステムに関連付けられたコマンドで開く。

vimproc#get_command_name({command} [, {path}, {count}])	*vimproc#get_command_name()*
		{command}を{path}から検索し、本当の名前を返す。 {path}を省略
		すると、$PATHが代わりに使用される。{count}を指定すると、
		{count}番目の候補が返る。{count}に-1を指定すると、結果はリス
		トになる。

vimproc#system({expr} [, {input}, {timeout}])	*vimproc#system()*
		標準の|system()|を置き換えるための関数。 Windows上で
		|system()|を使用すると、DOS窓が出てきてしまう。
		|vimproc#system()|ではそのようなことはない。 ただしシェルを
		起動しないので、シェルの内部コマンドは動作しない。 リダイレ
		クトも動かない。 リダイレクトについては、今後実装予定がある。
		引数は|vimproc#plineopen3()|と同じだが、引数に文字列を渡した場合、
		自前のルーチンで引数をパースする。引数の最後に&を付けると、コマ
		ンドをバックグラウンドで実行する。{timeout}を指定すると、一定時
		間ブロックした場合、プロセスを強制的に終了する。単位はミリ秒で
		ある。この機能には|+reltime|が必要となる。省略すると、0を指定し
		たことになり無視される。内部で浮動小数点演算をしているため、Vim
		7.2以上でないと動作しない。

vimproc#system_bg({expr})			*vimproc#system_bg()*
		|vimproc#parser#system()|と同様だが、コマンドをバックグラウ
		ンドで実行する。入力はできない。

vimproc#get_last_status()			*vimproc#get_last_status()*
		前回の|vimproc#system()|の実行において得られた、戻り値を取得する。

vimproc#get_last_errmsg()			*vimproc#get_last_errmsg()*
		前回の|vimproc#system()|の実行において、標準エラー出力に出力された
		エラーメッセージを取得する。

vimproc#fopen({path}, {flags} [, {mode}])	*vimproc#fopen()*
		{path}で指定されるファイルを開く。
		{flags}にはC言語のopen()と同じ各種のフラグを文字列形式で指定す
		る。

vimproc#socket_open({host}, {port})		*vimproc#socket_open()*
		{host}, {port}で指定されるソケットをオープンし、オブジェクトを
		返す。{host}は文字列、{port}は数値である。

vimproc#popen2({args})				*vimproc#popen2()*
		{args}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは自前のパーサによってパース
		される。
		
		{args}は引数を区切ったリストである。

vimproc#popen3({args})				*vimproc#popen3()*
		標準エラー出力を分けること以外は|vimproc#popen2()|と同じである。

vimproc#plineopen2({commands})			*vimproc#plineopen2()*
		{commands}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは自前のパーサによってパース
		される。
		パイプも解釈される。
		
		{commands}はコマンドごとに区切ったディクショナリのリストである。
		ディクショナリは次のキーを持つ。
		args			引数を区切ったリスト。
		fd			出力先のファイル名。空にすると出力はパ
					イプラインの次のプロセスに渡される。

vimproc#plineopen3({commands})			*vimproc#plineopen3()*
		標準エラー出力を分けること以外は|vimproc#plineopen2()|と同じである。

vimproc#pgroup_open({commands})			*vimproc#pgroup_open()*
		{commands}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは自前のパーサによってパース
		される。
		パイプの他に、; && ||も解釈される。
		
		{statements}はコマンドごとに区切ったディクショナリのリストである。
		ディクショナリは次のキーを持つ。
		statement		実行するパイプライン情報。中身は
					|vimproc#plineopen2()|の引数と同じ。
		condition		次のコマンドを実行する条件。
					always, true, falseが指定できる。
					alwaysなら必ず実行される。
					trueならコマンドが成功したときに実行、
					falseならコマンドが失敗したときに実行。

vimproc#ptyopen({args})				*vimproc#ptyopen()*
		{args}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは自前のパーサによってパース
		される。
		パイプは解釈されない。
		
		{args}は引数を区切ったリストである。

vimproc#kill({pid}, {sig})			*vimproc#kill()*
		{pid}で指定されるプロセスに対し、{sig}のシグナルを送信する。

------------------------------------------------------------------------------
VARIABLES 					*vimproc-variables*

						*g:vimproc_dll_path*
g:vimproc_dll_path		(default Win32 or Cygwin : "$VIMRUNTIME/autoload/proc.dll"
					others: "$VIMRUNTIME/autoload/proc.so")
		vimprocが利用する動的ライブラリである、proc.soまたはproc.dll
		へのパス を指定する。ライブラリはあらかじめコンパイルしてお
		かなければならない。このファイルが存在しないとエラーになる。

==============================================================================
EXAMPLES					*vimproc-examples*
>
	" File open test.
	let file = vimproc#fopen("./test1.vim", "O_RDONLY", 0)
	let res = file.read()
	call file.close()
	new
	call append(0, split(res, '\r\n\|\r\|\n'))
	
	" Pipe open test.
	let sub = vimproc#parser#popen2('ls')
	let res = ''
	while !sub.stdout.eof
	let res .= sub.stdout.read()
	endwhile
	let [cond, status] = sub.waitpid()
	new
	call append(0, split(res, '\r\n\|\r\|\n') + [string([cond, status])])
	
	" Socket open test.
	let sock = vimproc#socket_open('www.yahoo.com', 80)
	call sock.write("GET / HTTP/1.0\r\n\r\n")
	let res = ''
	while !sock.eof
	let res .= sock.read()
	endwhile
	call sock.close()
	new
	call append(0, split(res, '\r\n\|\r\|\n'))
<
==============================================================================
TODO						*vimproc-todo*

==============================================================================
BUGS						*vimproc-bugs*

==============================================================================
CHANGELOG					*vimproc-changelog*

doc/vimproc.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
