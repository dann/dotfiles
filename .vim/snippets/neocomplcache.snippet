
snippet _
    
    snippet lorem
        Lorem ipsum dolor sit amet, consectetur magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum<++>\<c-o>:normal! gqq\<CR>
    
    snippet modeline
        `Snippet_Modeline()`

snippet ant

snippet c
    
    snippet cl
        class ${1:`Filename('$1_t', 'name')`} {
        	public:
        		$1 (${2:arguments});
        		virtual ~$1 ();
        	private:
        		${3:/* data */}
        };
    
    snippet def
        #ifndef $1
        #define ${1:SYMBOL} ${2:value}
        #endif${3}
    
    snippet do
        do {
        	${2:/* code */}
        } while (${1:/* condition */});
    
    snippet el
        else {
        	${1}
        }
    
    snippet for
        for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
        	${4:/* code */}
        }
    
    snippet forr
        for (${1:i} = 0; ${2:$1 < 5}; $1${3:++}) {
        	${4:/* code */}
        }
    
    snippet fpf
        fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
    
    snippet fun
        ${1:void} ${2:function_name} (${3})
        {
        	${4:/* code */}
        }
    
    snippet if
        if (${1:/* condition */}) {
        	${2:/* code */}
        }
    
    snippet main
        int main (int argc, char const* argv[])
        {
        	${1:/* code */}
        	return 0;
        }
    
    snippet map
        std::map<${1:key}, ${2:value}> map${3};
    
    snippet ns
        namespace ${1:`Filename('', 'my')`} {
        	${2}
        } /* $1 */
    
    snippet once
        #ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
        #define $1
        
        ${2}
        
        #endif /* end of include guard: $1 */
    
    snippet pr
        printf("${1:%s}\n"${2});${3}
    
    snippet readfile
        std::vector<char> v;
        if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
        	char buf[1024];
        	while (size_t len = fread(buf, 1, sizeof(buf), $2))
        		v.insert(v.end(), buf, buf + len);
        	fclose($2);
        }${3}
    
    snippet st
        struct ${1:`Filename('$1_t', 'name')`} {
        	${2:/* data */}
        }${3: /* optional variable list */};${4}
    
    snippet t
        ${1:/* condition */} ? ${2:a} : ${3:b}'
    
    snippet td
        typedef ${1:int} ${2:MyCustomType};
    
    snippet tds
        typedef struct {
        	${2:/* data */}
        } ${1:`Filename('$1_t', 'name')`};
    
    snippet vector
        std::vector<${1:char}> v${2};
    
    snippet wh
        while (${1:/* condition */}) {
        	${2:/* code */}
        }

snippet css
    
    snippet #
        #${1:id} {
          ${2}
        }
    
    snippet cl
        .${1:class} {
          ${2:color: pink;}
        }
    
    snippet tag
        ${1:tag} {
          ${2:color: pink;}
        }

snippet eruby-rails
    
    snippet conf
        <% content_for :${1:yield_label_in_layout} do -%>
        	${2}
        <% end -%>
    
    snippet cs
        <%= collection_select <+object+>, <+method+>, <+collection+>, <+value_method+>, <+text_method+><+, <+[options]+>, <+[html_options]+>+> %>
    
    snippet ct
        <%= content_tag '${1:DIV}', ${2:content}${3:,options} -%>
    
    snippet end
        <% end -%>
    
    snippet ff
        <% form_for @${1:model} do |f| -%>
        	${2}
        <% end -%>
    
    snippet ffcb
        <%= ${1:f}.check_box :${2:attribute} %>
    
    snippet ffe
        <% error_messages_for :${1:model} -%>
        
        <% form_for @${2:model} do |f| -%>
        	${3}
        <% end -%>
    
    snippet ffff
        <%= ${1:f}.file_field :${2:attribute} %>
    
    snippet ffhf
        <%= ${1:f}.hidden_field :${2:attribute} %>
    
    snippet ffl
        <%= ${1:f}.label :${2:attribute}, '${3:$2}' %>
    
    snippet ffpf
        <%= ${1:f}.password_field :${2:attribute} %>
    
    snippet ffrb
        <%= ${1:f}.radio_button :${2:attribute}, :${3:tag_value} %>
    
    snippet ffs
        <%= ${1:f}.submit "${2:submit}" %>
    
    snippet ffta
        <%= ${1:f}.text_area :${2:attribute} %>
    
    snippet fftf
        <%= ${1:f}.text_field :${2:attribute} %>
    
    snippet fields
        <% fields_for :${1:model}, @$1 do |${2:f}| -%>
        	${3}
        <% end -%>
    
    snippet for
        <% for ${2:item} in ${1:list} -%>
        	${3}
        <% end -%>
    
    snippet ft
        <% form_tag(<+:action => "<+update+>"+><+, {:<+class+> => "<+form+>"}+>) do -%>
          <++>
        <% end -%>
    
    snippet i18
        I18n.t('${1:type.key}')${2}
    
    snippet it
        <%= image_tag "${1}"${2} %>
    
    snippet jit
        <%= javascript_include_tag <+:all+><+, :cache => <+true+>+> %>
    
    snippet jsit
        <%= javascript_include_tag "${1}" %>
    
    snippet lia
        <%= link_to "${1:link text}", :action => "${2:index}" %>
    
    snippet liai
        <%= link_to "<+link text+>", :action => "<+edit+>", :id => <+@<+item+>+> %>
    
    snippet lic
        <%= link_to "${1:link text}", :controller => "${2:items}" %>
    
    snippet lica
        <%= link_to "${1:link text}", :controller => "${2:items}", :action => "${3:index}" %>
    
    snippet licai
        <%= link_to "<+link text+>", :controller => "<+items+>", :action => "<+edit+>", :id => <+@<+item+>+> %>
    
    snippet lim
        <%= link_to <+model+>.<+name+>, <+<+model+>_path(<+model+>)+> %>
    
    snippet linp
        <%= link_to <+"<+link text+>"+>, <+<+parent+>_<+child+>_path(<+@+><+parent+>, <+@+><+child+>)+> %>
    
    snippet linpp
        <%= link_to <+"<+link text+>"+>, <+<+parent+>_<+child+>_path(<+@+><+parent+>)+> %>
    
    snippet lip
        <%= link_to <+"<+link text+>"+>, <+<+model+>_path(<+@+><+instance+>)+> %>
    
    snippet lipp
        <%= link_to <+"<+link text+>"+>, <+<+model+>s_path+> %>
    
    snippet lt
        <%= link_to "${1:name}", ${2:dest} %>
    
    snippet ofcfs
        <%= options_from_collection_for_select <+collection+>, <+value_method+>, <+text_method+><+, <+[selected_value]+>+> %>
    
    snippet rf
        <%= render :file => "${1:file}"${2} %>
    
    snippet rp
        <%= render :partial => "${1:file}"${2} %>
    
    snippet rt
        <%= render :template => "${1:file}"${2} %>
    
    snippet slt
        <%= stylesheet_link_tag <+:all+><+, :cache => <+true+>+> %>
    
    snippet sslt
        <%= stylesheet_link_tag "${1}" %>
    
    snippet st
        <%= submit_tag "<+Save changes+>"<+, :id => "<+submit+>"+><+, :name => "<+submit+>"+><+, :class => "<+form_name+>"+><+, :disabled => <+false+>+><+, :disable_with => "<+Please wait+>"+> %>

snippet eruby
    
    snippet if
        <% if ${1:condition} %>
        	${2}
        <% end %>
    
    snippet ife
        <% if ${1} %>
        	${2}
        <% else %>
        <% end %>
    
    snippet unless
        <% unless ${1} %>
        	${2}
        <% end %>
    
    snippet unlesse
        <% if ${1} %>
        	${2}
        <% else %>
        <% end %>

snippet haml
    
    snippet conf
        -content_for :${1:yield_label_in_layout} do
          ${2}
          
    
    snippet cs
        =collection_select :${1:object}, :${2:method}, :${3:collection}, :${4:value_method}, :${5:text_method} ${6:, [options]} ${7:, [html_options]}
    
    snippet ff
        -form_for @${1:model} do |f|
          ${2}
    
    snippet ffcb
        =f.check_box :${1:attribute}
    
    snippet ffe
        =error_messages_for :${1:model}
        
        -form_for @${2:model} do |f|
          ${3}
    
    snippet ffff
        =f.file_field :${1:attribute}
    
    snippet ffhf
        =f.hidden_field :${1:attribute}
    
    snippet ffl
        =f.label :${1:attribute}
    
    snippet ffpf
        =f.password_field :${1:attribute}
    
    snippet ffrb
        =f.radio_button :${1:attribute}, :${2:tag_value}
    
    snippet ffs
        =f.submit "<+Submit+>"<+, :disable_with => '<+Submitting+>'+>
    
    snippet ffta
        =f.text_area :${1:attribute}
    
    snippet fftf
        =f.text_field :${1:attribute}
    
    snippet fields
        -fields_for :${1:model}, @$1 do |${2:f}|
          ${3}
    
    snippet for
        -if !${1:list}.blank?
          -for ${2:item} in $1
            ${3}
        -else
         ${4}
        
    
    snippet ft
        -form_tag(<+:action => "<+update+>"+><+, {:<+class+> => "<+form+>"}+>) do
          <++>
    
    snippet if
        -if ${1}
          ${2}
    
    snippet ife
        -if ${1}
          ${2}
        -else
          
    
    snippet it
        =image_tag "${1}"
    
    snippet jit
        =javascript_include_tag <+:all+><+, :cache => <+true+>+>
    
    snippet jsit
        =javascript_include_tag "${1}"
    
    snippet lia
        =link_to "${1:link text}", :action => "${2:index}"
    
    snippet liai
        =link_to "<+link text+>", :action => "<+edit+>", :id => <+@<+item+>+>
    
    snippet lic
        =link_to "${1:link text}", :controller => "${2:items}"
    
    snippet lica
        =link_to "${1:link text}", :controller => "${2:items}", :action => "${3:index}"
    
    snippet licai
        =link_to "<+link text+>", :controller => "<+items+>", :action => "<+edit+>", :id => <+@<+item+>+>
    
    snippet lim
        =link_to <+model+>.<+name+>, <+<+model+>_path(<+model+>)+>
    
    snippet linp
        =link_to <+"<+link text+>"+>, <+<+parent+>_<+child+>_path(<+@+><+parent+>, <+@+><+child+>)+>
    
    snippet linpp
        =link_to <+"<+link text+>"+>, <+<+parent+>_<+child+>_path(<+@+><+parent+>)+>
    
    snippet lip
        =link_to <+"<+link text+>"+>, <+<+model+>_path(<+@+><+instance+>)+>
    
    snippet lipp
        =link_to <+"<+link text+>"+>, <+<+model+>s_path+>
    
    snippet lt
        =link_to "${1}", ${2:dest}
    
    snippet ofcfs
        =options_from_collection_for_select <+collection+>, <+value_method+>, <+text_method+><+, <+[selected_value]+>+>
    
    snippet rf
        =render :file => "${1:file}"${2}
    
    snippet rp
        =render :partial => "${1:file}"${2}
    
    snippet rt
        =render :template => "${1:file}"${2}
    
    snippet slt
        =stylesheet_link_tag <+:all+><+, :cache => <+true+>+>
    
    snippet sslt
        =stylesheet_link_tag "${1}"
    
    snippet st
        =submit_tag "<+Save changes+>"<+, :id => "<+submit+>"+><+, :name => "<+submit+>"+><+, :class => "<+form_name+>"+><+, :disabled => <+false+>+><+, :disable_with => "<+Please wait+>"+>
    
    snippet unless
        -unless ${1}
          ${2}
        
    
    snippet unlesse
        -if ${1}
          ${2}
        -else
          

snippet html
    
    snippet base
        <base href="<++>"<+ target="<++>"+>/>
    
    snippet body
        <body<+ id="<+id+>"<+ onload="<++>"+>+>>
          <++>
        </body>
    snippet doctype
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">${1}
    
    snippet form
        <form action="${1:action}" method="${2:post}" accept-charset="utf-8">
          ${3}
        
          <p><input type="submit" value="Continue &rarr;"/></p>
        </form>
    
    snippet h1
        <h1<+ id="<+id+>"+>><++></h1>
    
    snippet head
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=utf-8"/>
          <title>${1:Page Title}</title>
          ${2}
        </head>
    
    snippet href
        <a href="${1}">${2}</a>
    
    snippet ifie
        <!--[if IE ${1:6}]>${2}<![endif]-->${3}
    
    snippet img
        <img src="${1}"${2} />
    
    snippet input
        <input type="text" name="<++>" <+value="<++>"+> <+size="<++>"+> <+maxlength="<++>"+> />
    
    snippet inputl
        <label for="${1:input_id}">${2}</label>
        <input type="${3:text/submit/hidden/button}" name="${4:$1}" value="${5:value}" id="${6:$1}"/>${7}
    
    snippet label
        <label for="${1:id}">${2:label_text}</label>
    
    snippet link
        <link rel="${1:stylesheet}" href="${2:path-to-stylesheet}.css" type="text/css" media="${3:screen}" charset="${4:utf-8}"/>${5}
    
    snippet mailto
        <a href="mailto:<+email+><+?subject=<+feedback+>+>"><+email me+></a>
    
    snippet meta
        <meta name="${1:name}" content="${2:content}"/>
    
    snippet option
        <option<+ value="<+option+>"+>><+value+></option>
    
    snippet select
        <select name="<+some_name+>" id="<+id+>"<+<+ multiple+><+ onchange="<++>"+><+ size="<+1+>"+>+>>
          <option<+ value="<+option1+>"+>><+value1+></option>
          <option<+ value="<+option2+>"+>><+value2+></option>
          <++>
        </select>
    
    snippet style
        <style type="text/css" media="screen">
          ${1}
        </style>
    
    snippet t
        <${1:div}${2}>
        	${3}
        </$1>${4}
    
    snippet textarea
        <textarea name="${1:Name}" rows="${2:8}" cols="${2:40}">${3}</textarea>

snippet java
    
    snippet for
        for(${1:int i=0}; ${2:condition}; ${3:i++}){
        	${4}
        }
    
    snippet gs
        //getter for $3
        public ${2:variable_type} get${1:VariableName}() {
            return ${3:variableName};
        }
        
        //setter for $3
        public void set$1($2 $3) {
           this.$3 = $3;
        }${4}
    
    snippet if
        if(${1}){
        	${2}
        }
    
    snippet ife
        if(${1}){
        	${2}
        }else{
        }
    
    snippet log
        System.${1:out}.println(${2});
    
    snippet m
        /**
         * ${7:Method Description}
         * ${5}
         * @return ${6}
         */
        ${1:public} ${2:void} ${3:methodName}(${4}) {
        	${8}
        }

snippet javascript-jquery
    
    snippet add
        ${1:obj}.add('${2:selector expression}')${3}
    
    snippet addClass
        ${1:obj}.addClass('${2:class name}')${3}
    
    snippet after
        ${1:obj}.after('${2:Some text <b>and bold!</b>}')${3}
    
    snippet ajax
        $.ajax({
        	url: "${1:mydomain.com/url}",
        	type: "${2:POST}",
        	dataType: "${3:xml/html/script/json}",
        	data: $.param( $("${4:Element or Expression}") ),
        
        	complete: function() {
        		${5://called when complete}
        	},
        
        	success: function() {
        		${6://called when successful}
        	},
        
        	error: function() {
        		${7://called when there is an error}
        	},
        });
    
    snippet ajaxerror
        .ajaxError(function(${1:request, settings}) {
        	${2://stuff to do when an AJAX call returns an error};
        });
        ${3}
    
    snippet ajaxget
        $.get('${1:/test/ajax-test.xml}', function(xml){
        	${2:alert( ("title",xml).text() ) //optional stuff to do after get;}
        });
    
    snippet ajaxgetif
        $.getIfModified('${1:/test/test.cgi}', function(data){
        	${2:alert( "Data loaded: " + data ) //optional stuff to do after get;}
        });
    
    snippet ajaxpost
        $.post('<+/path/to/file.cgi+>',{
         <+<+param1+>: "<+value1+>", <+param2+>: "<+value2+>"+>},
         function(){
            <+//stuff to do after event occurs;+>
        });
    
    snippet ajaxsend
        .ajaxSend(function(${1:request, settings}) {
        	${2://stuff to do when an AJAX call returns an error};
        });
        ${3}
    
    snippet ajaxsetup
        $.ajaxSetup({
        	url: "${1:mydomain.com/url}",
        	type: "${2:POST}",
        	dataType: "${3:xml/html/script/json}",
        	data: $.param( $("${4:Element or Expression}") ),
        
        	complete: function() {
        		${5://called when complete}
        	},
        
        	success: function() {
        		${6://called when successful}
        	},
        
        	error: function() {
        		${7://called when there is an error}
        	},
        });
    
    snippet ajaxstart
        $.ajaxStart(function() {
        	${1://stuff to do when an AJAX call is started and no other AJAX calls are in progress};
        });
        ${2}
    
    snippet ajaxstop
        $.ajaxStop(function() {
        	${1://stuff to do when an AJAX call is started and no other AJAX calls are in progress};
        });
        ${2}
    
    snippet ajaxsuccess
        $.ajaxSuccess(function() {
          ${1://stuff to do when an AJAX call is started and no other AJAX calls are in progress};
        });
        ${2}
    
    snippet animate
        ${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})${4}
    
    snippet append
        ${1:obj}.append('${2:Some text <b>and bold!</b>}')${3}
    
    snippet appendTo
        ${1:obj}.appendTo('${2:selector expression}')${3}
    
    snippet attr
        ${1:obj}.attr('${2:attribute}', '${3:value}')${4}
    
    snippet attrm
        ${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})${6}
    
    snippet before
        ${1:obj}.before('${2:Some text <b>and bold!</b>}')${3}
    
    snippet bind
        ${1:obj}.bind('${2:event name}', function(${3:event}) {
        	${4:// Act on the event}
        });
    
    snippet blur
        ${1:obj}.blur(function() {
        	${2:// Act on the event}
        });
    
    snippet change
        ${1:obj}.change(function() {
        	${2:// Act on the event}
        });
    
    snippet children
        ${1:obj}.children('${2:selector expression}')${3}
    
    snippet click
        ${1:obj}.click(function() {
        	${2:// Act on the event}
        });
    
    snippet clone
        ${1:obj}.clone()${2}
    
    snippet contains
        ${1:obj}.contains('${2:text to find}')${3}
    
    snippet css
        ${1:obj}.css('${2:attribute}', '${3:value}')${4}
    
    snippet cssm
        ${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})${6}
    
    snippet dblclick
        ${1:obj}.dblclick(function() {
        	${2:// Act on the event}
        });
    
    snippet each
        ${1:obj}.each(function(index) {
        	${2:this.innerHTML = this + " is the element, " + index + " is the position";}
        });
    
    snippet el
        $('${1}')${2:}
    
    snippet eltrim
        $.trim('${1:string}')${2}
    
    snippet end
        ${1:obj}.end()${2}
    
    snippet error
        ${1:obj}.error(function() {
        	${2:// Act on the event}
        });
    
    snippet fadein
        ${1:obj}.fadeIn('${2:slow/400/fast}')${3}
    
    snippet fadeinc
        ${1:obj}.fadeIn('slow/400/fast', function() {
        	${2://Stuff to do *after* the animation takes place};
        });
    
    snippet fadeout
        ${1:obj}.fadeOut('${2:slow/400/fast}')${3}
    
    snippet fadeoutc
        ${1:obj}.fadeOut('slow/400/fast', function() {
        	${2://Stuff to do *after* the animation takes place};
        });
    
    snippet fadeto
        ${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})${4}
    
    snippet fadetoc
        ${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function() {
        	${3://Stuff to do *after* the animation takes place};
        });
    
    snippet filter
        ${1:obj}.filter('${2:selector expression}')${3}
    
    snippet find
        ${1:obj}.find('${2:selector expression}')${3}
    
    snippet focus
        ${1:obj}.focus(function() {
        	${2:// Act on the event}
        });
    
    snippet get
        ${1:obj}.get(${2:element index})${3}
    
    snippet getjson
        $.getJSON('<+/path/to/file.cgi+>',{
         <+<+param1+>: "<+value1+>", <+param2+>: "<+value2+>"+>},
         function(json){
            <+//stuff to do after event occurs;+>
        });
    
    snippet getscript
        $.getScript('${1:somescript.js}', function(){
        	${2://optional stuff to do after getScript;}
        });
    
    snippet height
        ${1:obj}.height(${2:integer})${3}
    
    snippet hide
        ${1:obj}.hide('${2:slow/400/fast}')${3}
    
    snippet hidec
        ${1:obj}.hide('${2:slow/400/fast}', function() {
        	${3://Stuff to do *after* the animation takes place}
        });
    
    snippet hover
        ${1:obj}.hover(function() {
        	${2:// Stuff to do when the mouse enters the element;}
        }, function() {
        	${3:// Stuff to do when the mouse leaves the element;}
        });${4}
    
    snippet html
        ${1:obj}.html('${2:Some text <b>and bold!</b>}')${3}
    
    snippet insertAfter
        ${1:obj}.insertAfter('${2:selector expression}')${3}
    
    snippet insertBefore
        ${1:obj}.insertBefore('${2:selector expression}')${3}
    
    snippet is
        ${1:obj}.is('${2:selector expression}')${3}
    
    snippet load
        ${1:obj}.load(function() {
        	${2:// Act on the event}
        });
    
    snippet loadf
        <+obj+>.load('<+/path/to/file.htm+>', { <+<+param1+>: "<+value1+>", <+param2+>: "<+value2+>"+> }, function() {
        	<+// Stuff to do after the page is loaded+>
        });
    snippet loadif
        <+obj+>.loadIfModified('<+/path/to/file.htm+>', { <+<+param1+>: "<+value1+>", <+param2+>: "<+value2+>"+> }, function() {
        	<+// Stuff to do after the page is loaded+>
        });
    snippet mdown
        ${1:obj}.mousedown(function() {
        	${2:// Act on the event}
        });
    
    snippet mmove
        ${1:obj}.mousemove(function() {
        	${2:// Act on the event}
        });
    
    snippet mout
        ${1:obj}.mouseout(function() {
        	${2:// Act on the event}
        });
    
    snippet mover
        ${1:obj}.mouseover(function() {
        	${2:// Act on the event}
        });
    
    snippet mup
        ${1:obj}.mouseup(function() {
        	${2:// Act on the event}
        });
    
    snippet next
        ${1:obj}.next('${2:selector expression}')${3}
    
    snippet not
        ${1:obj}.not('${2:selector expression}')${3}
    
    snippet one
        ${1:obj}.one('${2:event name}', function(${3:event}) {
        	${4:// Act on the event once}
        });
    
    snippet parent
        ${1:obj}.parent('${2:selector expression}')${3}
    
    snippet parents
        ${1:obj}.parents('${2:selector expression}')${3}
    
    snippet prepend
        ${1:obj}.prepend('${2:Some text <b>and bold!</b>}')${3}
    
    snippet prependto
        ${1:obj}.prependTo('${2:selector expression}')${3}
    
    snippet prev
        ${1:obj}.prev('${2:selector expression}')${3}
    
    snippet ready
        $(document).ready(function() {
        	${1:// Stuff to do as soon as the DOM is ready;}
        });
    
    snippet remove
        ${1:obj}.remove()${2}
    
    snippet removeattr
        ${1:obj}.removeAttr('${2:attribute name}')${3}
    
    snippet removeclass
        ${1:obj}.removeClass('${2:class name}')${3}
    
    snippet reset
        ${1:obj}.reset(function() {
        	${2:// Act on the event}
        });
    
    snippet resize
        ${1:obj}.resize(function() {
        	${2:// Act on the event}
        });
    
    snippet scroll
        ${1:obj}.scroll(function() {
        	${2:// Act on the event}
        });
    
    snippet sdown
        ${1:obj}.slideDown('${2:slow/400/fast}')${3}
    
    snippet sdownc
        ${1:obj}.slideDown('${2:slow/400/fast}', function() {
        	${3://Stuff to do *after* the animation takes place};
        });
    
    snippet sdupc
        ${1:obj}.slideUp('${2:slow/400/fast}', function() {
        	${3://Stuff to do *after* the animation takes place};
        });
    
    snippet select
        ${1:obj}.select(function() {
        	${2:// Act on the event}
        });
    
    snippet show
        ${1:obj}.show('${2:slow/400/fast}')${3}
    
    snippet showc
        ${1:obj}.show('${2:slow/400/fast}', function() {
        	${3://Stuff to do *after* the animation takes place}
        });
    
    snippet sib
        ${1:obj}.siblings('${2:selector expression}')${3}
    
    snippet size
        ${1:obj}.size()${2}
    
    snippet stoggle
        ${1:obj}.slideToggle('${2:slow/400/fast}')${3}
    
    snippet submit
        ${1:obj}.submit(function() {
        	${2:// Act on the event once}
        });
    
    snippet sup
        ${1:obj}.slideUp('${2:slow/400/fast}')${3}
    
    snippet text
        ${1:obj}.text(${2:'some text'})${3}
    
    snippet this
        $(this)${1}
    
    snippet tog
        ${1:obj}.toggle(function() {
        	${2:// Stuff to do every *odd* time the element is clicked;}
        }, function() {
        	${3:// Stuff to do every *even* time the element is clicked;}
        });
        ${4}
    
    snippet togclass
        ${1:obj}.toggleClass('${2:class name}')${3}
    
    snippet togsh
        ${1:obj}.toggle('${2:slow/400/fast}')${3}
    
    snippet trig
        ${1:obj}.trigger('${2:event name}')${3}
    
    snippet unbind
        ${1:obj}.unbind('${2:event name}')${3}
    
    snippet val
        ${1:obj}.val('${2:text}')${3}
    
    snippet width
        ${1:obj}.width(${2:integer})${3}
    
    snippet wrap
        ${1:obj}.wrap('${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')${3}

snippet javascript
    
    snippet anon
        function(${1}) { ${2} };
    
    snippet for
        for (var <+i+>=0; <+i+> < <+<+Things+>.length+>; <+i+>++) {
        <+<+Things+>[<+i+>]+>
        };
    
    snippet fun
        function ${1:function_name} (${2:argument}) {
        	${3:// body}
        }
    
    snippet if
        if (${1:true}) { ${2} };
    
    snippet ife
        if (${1:true}) {
        	${2}
        } else {
        };
    
    snippet met
        ${1:method_name}: function(${2:attribute}){
          ${3}
        }${4:, }
    
    snippet proto
        ${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
        	${4:// body}
        };
    
    snippet timeout
        setTimeout(function() { ${1} }, ${2:10});
