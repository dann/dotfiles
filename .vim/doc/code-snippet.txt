*code-snippet.txt*	Simple input assistance of code snippets or idioms
		for Vim version 7.0 or later
			by MIYAKAWA Taku <ripjohn@s28.xrea.com>
			Last Change: 2007-12-04.

code-snippet plugin				*code-snippet*

- Install the plugin			|code-snippet-install|
- Overview				|code-snippet-overview|
- Register snippets			|code-snippet-register|
- Snippets for particular filetypes	|code-snippet-filetype|
- Move around placeholders		|code-snippet-move|
- Fill in placeholders			|code-snippet-fillin|
- Configuration				|code-snippet-config|
	- Disable the plugin			|code-snippet-disable|
	- Map functions to other keys		|code-snippet-mappings|
	- Use the select mode			|code-snippet-selectmode|
	- Define the format of placeholders	|code-snippet-format|
- Changelog				|code-snippet-changelog|

==============================================================================
INSTALL THE PLUGIN				*code-snippet-install* [[[

Extend the zip file of the package to "%HOME\vimfiles\" (Windows) or
"$HOME/.vim/" (*nix).  Then open this "code-snippet.txt" with Vim under
"%HOME\vimfiles\doc\" or "$HOME/.vim/doc/", and type ":helptags ." as an ex
command to register this help file.

To enable loading plugins and indent files for particular file types, it is
recomended to add this line to your|.vimrc|.
>
	filetype plugin indent on
<
It is not required for running this plugin, but necessary for registering
snippets for particular file types.  And the setting makes it easy to register
multi-line snippets. See|filetype|.

On most terminal emulators, and some other systems, <S-CR> and <C-CR> of the
default key mappings may not work.  In those conditions, You should therefore
map the commands to other keys.  See|code-snippet-mappings|.

It is same as installing other plugins.  See|add-plugin| and |add-local-help|
on the Vim help for more information.
]]]
==============================================================================
OVERVIEW					*code-snippet-overview* [[[

This plugin provides a simple input assistance of code snippets.  A code
snippet is an idiom much used in source codes or markuped texts.  First, you
should register a snippet.  Type like this in the commandline mode.
>
	:StringAbbrLocal fputs() "fputs([~str~], [~fp:stderr~])[~~]"
<
Then type like this in the insert mode.
>
	fputs()
<
And press <S-CR>.
>
	fputs([~str~], [~fp:stderr~])[~~]
<
The line is expanded like above and "[~str~]" is selected in the visual mode.
"[~...~]" is a placeholder.  Each time you press <S-CR>, the cursor jumps to
the next placeholder.  Press <C-CR> to jump back to the previous placeholder.

When you press <CR>, the placeholder under the cursor is cut and Vim switches
to the insert mode.  So that you can fill in the place.  Pressing <CR> at the
second placeholder "[~fp:stderr~]", the default string "stderr" is inserted.
If you want to insert another word, it can be deleted by pressing <C-U> (see
|i_Ctrl-U|).  The last empty placeholder "[~~]" is not selected by <S-CR>, but
simply deleted so that you can insert a semicolon and so on.

To read this help file, type ":help code-snippet" in the commandline mode.
That command does not work if the help file is not correctly installed. See
|add-local-help|.
]]]
==============================================================================
REGISTER SNIPPETS				*code-snippet-register* [[[

Ex-commands~
						*:StringAbbrGlobal*
:StringAbbrGlobal {trigger} {snippet-expr}
		Add an|abbreviation|for {trigger} to {snippet-expr}.
		{snippet-expr} must be an|expression|evaluated as a string.
		See also|expr-string|.

						*:StringAbbrLocal*
:StringAbbrLocal {trigger} {snippet-expr}
		Add an buffer-local|abbreviation|for {trigger} to
		{snippet-expr}.  {snippet-expr} must be an|expression|
		evaluated as a string.  It is mostly used for snippets for a
		particular|filetype|.  See also|:abbreviate-local|.

Those commands are not more than wrappers to|:iabbrev|.  snippets registered
by those commands work in the same way as normal abbreviations.  Therefore see
also|abbreviations|on the Vim help for further information.

The following ex commands have a same meaning.
>
	:StringAbbrLocal while() "while([~cond~]) {\n[~body~]\n}"
	:iabbr <buffer> while() while([~cond~])<Space>{<CR>[~body~]<CR>}
<
In the above sample, the trigger string is terminated by extra "()".  It is in
order to avoid expansion when you intend to write literally "while(n > 0)..."
for instance.  You might prefer to use uppercase triggers like "WHILE" for the
same purpose.

"\n" means a line break and is converted to <CR>.  Those special characters
are appropriately converted so that|:iabbrev|can deal with them.  Like that
sample, snippets can contain line breaks, and thus you can use multi-line
snippets.  Mostly "\t" or <Tab> at the top of line is not needed, because the
autoindent works.  If you want to adjust indents, insert <C-T> or <C-D> into
snippets like this.
>
	:StringAbbrLocal main() "int main(void)\n{\n[~~]\nreturn 0;\<C-D>\n}"
<
In that sample, <C-D> is inserted at the end of the return statement to remove
an extra indent.  See|i_Ctrl-T|,|i_Ctrl-D|about those commands, and see
|expr-quote|about how to embed special characters in strings.
]]]
==============================================================================
SNIPPETS FOR PARTICULAR FILETYPES		*code-snippet-filetype* [[[

To register snippets for a particular filetype, make a|filetype-plugin|.
A filetype-plugin is a script that is runed when a particular type of files is
loaded.

First, enable loading plugins for particular file types (see|vimrc-filetype|).
To register snippets for C source files, make "c_snippet.vim" in
"$HOME/.vim/ftplugin/" or "%HOME%\vimfiles\ftplugin\", and write these lines.
>
	" c_snippet.vim
	if exists(':StringAbbrLocal') != 2
	  finish
	endif
	StringAbbrLocal while() "while([~cond~]) {\n[~body~]\n}"
	StringAbbrLocal fgets() "fgets([~buf~], [~size~], [~fp:stdin~])[~~]"
	" ...
<
In a file name, a part of "c" before an underline is a name of the file type.
A part of "snippet" after an underline can be anything so you can change that
part when the name conflicts.

See also|add-plugin|, |filetype-plugin|and so on for more information.
]]]
==============================================================================
MOVE AROUND PLACEHOLDERS			*code-snippet-move* [[[

Commands~

<S-CR>	[mode: niv]
		Jump to the next placeholder.

<C-CR>	[mode: niv]
		Jump to the previous placeholder.

When you use one of those commands in the insert mode, it tries to expand the
snippet related to the trigger inserted there.  In fact, it works as pressing
<Esc>.  In other words, you can expand snippets by pressing <Esc> or <C-]>
expanding normal abbreviations.

Then, in each mode, the cursor jumps to the next/previous placeholder and the
placeholder is selected in the visual mode.  If there is no placeholder
below/above the current position, this command tries to jump to the first/last
placeholder of the buffer.  If the placeholder is empty or only contains space
characters or line breaks like "[~  ~]", it is simply deleted and Vim switches
to the insert mode.

<S-CR> in the insert mode starts searching from where the inserting started.
It is in order to select not a placeholder below the expanded snippet but the
first one of the expanded snippet,
]]]
==============================================================================
FILL IN PLACEHOLDERS				*code-snippet-fillin* [[[

Command~

<CR>	[mode: v]
		Cut the selected placeholder and switch to the insert mode.
		If the placeholder contains ":", the following text is
		inserted as the default.
]]]
==============================================================================
CONFIGURATION					*code-snippet-config* [[[

------------------------------------------------------------------------------
Disable the plugin				*code-snippet-disable* [[[~

To disable the plugin, set*g:CodeSnippet_disabled* nonzero like this.
>
	let g:CodeSnippet_disabled = 1
<]]]
------------------------------------------------------------------------------
Map functions to other keys			*code-snippet-mappings* [[[~

The default mappings are in fact mapped to the internal mappings.

	<S-CR>		*<Plug>CodeSnippet_forward*
	<C-CR>		*<Plug>CodeSnippet_backward*
	<CR>		*<Plug>CodeSnippet_fillin*

"forward" and "backward" work in the normal mode, the insert mode, and the
visual mode.  Those commands do nothing in the commandline mode.  "fillin"
works only in the visual mode.

If you want to map functions to other keys, use those internal mappings.  To
map the jumping functions to <C-J> and <C-K> for example, write like this.
>
	map <C-J> <Plug>CodeSnippet_forward
	imap <C-J> <Plug>CodeSnippet_forward
	map <C-K> <Plug>CodeSnippet_backward
	imap <C-K> <Plug>CodeSnippet_backward
<
To map the filling-in function to the Space key for example, write like this.
>
	vmap <Space> <Plug>CodeSnippet_fillin
<
To disable the default mappings, set*g:CodeSnippet_no_default_mappings*
nonzero like this.
>
	let g:CodeSnippet_no_default_mappings = 1
<]]]
------------------------------------------------------------------------------
Use the select mode				*code-snippet-selectmode* [[[~

To set jumping commands to select a placeholder in the select mode instead of
the visual mode, set the global variable*g:CodeSnippet_use_selectmode* or the
buffer-local variable*b:CodeSnippet_use_selectmode* nonzero.  If the both
variables exist, the buffer-local variable precedes.

See|select-mode|about the select mode.  I don't like this mode because it
seems to be an ugly imitation of the visual mode. Anyway, all the commands of
this plugin work in the select mode as in the visual mode.

 ]]]
------------------------------------------------------------------------------
Define the format of placeholders		*code-snippet-format* [[[~

A placeholder is a string delimited by an "opener" and a "closer".  If it
contains a "defind", the following string is regarded as the default text.
This is the initial setting.

	opener	"[~"
	closer	"~]"
	defind	":"

If you want to change the format, set these variables.

		 buffer-local variable		 global variable	
	opener	*b:CodeSnippet_opener*		*g:CodeSnippet_opener*
	closer	*b:CodeSnippet_closer*		*g:CodeSnippet_closer*
	defind	*b:CodeSnippet_defind*		*g:CodeSnippet_defind*

The buffer-local variables have higher priority than the global variables.
Any variables must not be empty and must not contain white spaces, tabs or
line breaks.

The next sample of a file type plugin defines the format of placeholders as
"<+ ... +>", and registers some snippets.
>
	" tex_snippet.vim
	if exists(':StringAbbrLocal') != 2
	  finish
	endif
	let b:CodeSnippet_opener = '<+'
	let b:CodeSnippet_closer = '+>'
	StringAbbrLocal chap@ "\\chapter{<+chap+>} % {{{\n\n"
		\ . "<++>\n\n"
		\ . "% }}}"
	StringAbbrLocal sect@ "\\section{<+heading+>} % {{{\n\n"
		\ . "<++>\n\n"
		\ . "% }}}"
<
"{{{" and "}}}" in the comments are signs of foldings when the value
of|'foldmethod'|is "marker".
 ]]]
------------------------------------------------------------------------------
]]]
==============================================================================
CHANGELOG					*code-snippet-changelog* [[[

2007-12-04
	- Corrected help files.  Placeholders were still written as
	  "(_ ... _)".
	- Sorry, changed again the default format of placeholders from
	  "[| ... |]" to "[~ ... ~]".  The format of "[| ... |]" causes
	  a trouble in help files.

2007-12-03
	- Fixed a bug that "|" is not escaped to <Bar> in :StringAbbr...
	- Changed the default format of placeholders from "(_ ... _)" to
	  "[| ... |]".

2007-12-02
	- Changed the name from "template plugin" to "code-snippet".
	- Changed the prefix from "Template_" to "CodeSnippet_".
	- Changed the internal mapping of <CR> from "replace" to "fillin".
	- Changed the default format of placeholders from "<+ ... +>" to
	  "(_ ... _)".
	- Fixed a bug that jumping commands cannot deal with adjacent
	  placeholders like "(_foo_)(__)".
	- Placeholders cannot contain line breaks.

2007-12-01
	- Removed unnecessary instructions.

2007-11-29
	- <S-CR> in the insert mode starts a search from where the last
	  insert started.
	- Placeholders can contain line breaks.
	- Only support version 7.0 and later.

2007-11-28
	- Expand snippets when pressing <S-CR> and <C-CR>.
	- Can use the select mode instead of the visual mode.
	- Changed the prefix from "TemplatePlugin_" to "Template_".

2007-11-26
	- Map the internal mappings to <Nop> out of appropriate modes.

2007-11-24
	- The initial version.
]]]
==============================================================================
 vim: set ts=8 sw=8 noet tw=78 ft=help fdm=marker fmr=[[[,]]] :
