#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Usage

    pystarter <module_name>

  You need to store the template file at ~/.pystarter/module_templates.yaml
  before you run the script. 
"""

import sys
import os
import subprocess
import time
import re
from optparse import OptionParser

import jinja2
from pit import Pit
import yaml


class ModuleStarter:

    def __init__(self, templates_path):
        self.renderer = TemplateRenderer(templates_path)
        self.config = self.init_config()

    def generate(self, module):
        dist_dir = self.creaete_and_move_distdir(module)
        self.write_template_files(module, self.config)
        self.generate_sphinx_docs(module, self.config)
        self.init_git_repo(module)
        self.show_banner(dist_dir)

    def show_banner(self, dist_dir):
        banner = \
            """
======================================================= 
%s module was successfully created!!
=======================================================
        """ \
            % dist_dir

        print banner

    def creaete_and_move_distdir(self, module):
        self._create_workdir(self.config)
        dist_dir = self._create_dist_dir(module)
        PathUtil.chdir(dist_dir)
        return dist_dir

    def _create_dist_dir(self, module):
        dist_dir = 'python-%s' % module
        if not PathUtil.exists(dist_dir):
            os.mkdir(dist_dir)
        return dist_dir

    def _create_workdir(self, config):
        workdir = config['workdir']
        if not PathUtil.exists(workdir):
            PathUtil.mkpath(workdir)

    def init_config(self):
        return Config.init()

    def write_template_files(self, module, config):
        templates = self.renderer.load_templates()
        vars = {'module': module, 'config': config,
                'localtime': time.localtime()}

        for tmpl in templates:
            file = tmpl['file']
            file = re.sub('\$module', module, file)
            self._write_template_file(file, tmpl['template'], vars)

    def generate_sphinx_docs(self, module, config):
        gen_command = \
            """cat <<EOF | sphinx-quickstart
docs
n
_
%(module)s
%(author)s
0.01
0.01
.rst
index
y
y
y
y
y
y
y
y
y
y
y
y
EOF
""" \
            % {'module': module, 'author': config['author']}

        ShellUtil.execute_command(gen_command)

    def init_git_repo(self, module):
        steps = [
            'git init',
            'git add *.*',
            'git add .gitignore',
            'git add Makefile',
            'git add docs',
            'git add %s' % module,
            'git commit -m "initial commit"',
            ]
        for step in steps:
            ShellUtil.execute_command(step)

    def _write_template_file(
        self,
        path,
        template,
        vars,
        ):

        if PathUtil.exists(path):
            ans = ShellUtil.prompt('%s exists. Override? [yN] ' % path,
                                   'n')
            if not re.match('[Yy]', ans):
                return

        dir = PathUtil.dirname(path)
        if not PathUtil.exists(dir):
            Logger.info('Creating directory %s' % dir)
            PathUtil.mkpath(dir)

        content = self._render(template, vars)
        FileUtil.write_file(path, content)

    def _render(self, template, vars):
        return self.renderer.render(template, vars)


class TemplateRenderer:

    def __init__(self, templates_path):
        self.templates_path = templates_path

    def load_templates(self):
        templates_content = FileUtil.read_file(self.templates_path)
        templates_content = templates_content.decode('utf8')
        return yaml.load_all(templates_content)

    def render(self, template, vars):
        env = jinja2.Environment()
        template_renderer = env.from_string(template)
        content = template_renderer.render(vars)
        return content


class Logger:

    @staticmethod
    def fatal(message, *args):
        print >> sys.stderr, 'Error:', message % args

    @staticmethod
    def info(message, *args):
        print >> sys.stderr, message % args


class PathUtil:

    @staticmethod
    def chdir(dir):
        os.chdir(dir)

    @staticmethod
    def dirname(path):
        return os.path.dirname(path)

    @staticmethod
    def exists(path):
        return os.path.exists(path)

    @staticmethod
    def mkpath(path):
        if path == '':
            return

        if not os.access(path, os.F_OK):
            os.makedirs(path)


class FileUtil:

    @staticmethod
    def write_file(path, content):
        Logger.info('Creating %s' % path)
        f = open(path, 'w')
        try:
            f.write(content)
        finally:
            f.close()

    @staticmethod
    def read_file(path):
        f = open(path)
        try:
            templates_content = f.read()
            return templates_content
        finally:
            f.close()


class ShellUtil:

    @staticmethod
    def prompt(message, default_value):
        input_value = raw_input(message)
        input_value = input_value or default_value
        return input_value

    @staticmethod
    def execute_command(command):
        subprocess.call(command, shell=True)


class Config:

    @staticmethod
    def init():
        workdir = os.path.join(os.environ['HOME'], '.pystarter', 'tmp')
        config = Pit.get('pystarter', {'require': {'author'
                         : 'your username', 'email': 'your email',
                         'workdir': workdir}})

        if not config['author'] or not config['email'] \
            or not config['workdir']:
            sys.exit(1)

        return config


def parse_args():
    parser = OptionParser(usage=globals()['__doc__'],
                          version='%prog 1.0')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error('Wrong number of arguments')

    return (options, args)


def get_templates_path():
    templates_path = os.path.join(os.environ['HOME'], 'devbin',
                                  'python_module_templates.yaml')
    if not PathUtil.exists(templates_path):
        Logger.fatal("%s doesn't exist. You need to create \
                    templates.yaml to generate the python module"
                      % templates_path)
        sys.exit(1)
    return templates_path


def main():
    (options, args) = parse_args()

    module = args[0]
    templates_path = get_templates_path()

    starter = ModuleStarter(templates_path)
    starter.generate(module)


if __name__ == '__main__':
    main()
