---
file: $module/__init__.py
template: |
  # -*- coding: utf-8 -*-

  """
      {{ module }} is the .
  
      It provides .
  
      :copyright: (c) 2011 by {{ config.author }}.
      :license: BSD, see LICENSE for more details.
  """

---
file: tests/README.rst
template: |
  How to test
  ===========

---
file: docs/.gitignore
template: |
  _themes
  _build

---
file: scripts/release.py
template: |
  #!/usr/bin/env python
  # -*- coding: utf-8 -*-
  """
      release
      ~~~~~~~
  
      Helper script that performs a release.
  
      :copyright: (c) 2011 by Dann
      :license: BSD, see LICENSE.txt for more details.
  """
  import sys
  import os
  import re
  from subprocess import Popen, PIPE
  
  
  def get_release_version():
      with open('CHANGES.rst') as f:
          lineiter = iter(f)
          for line in lineiter:
              match = re.search('^Version\s+(.*)', line.strip())
              if match is None:
                  continue
              version = match.group(1).strip()
              return version
  
  
  def check_release(version):
      log_info("Checking release: %s", version)
      check_is_repo_clean()
      check_version_isnt_in_tags(version)
  
  
  def check_version_isnt_in_tags(version):
      tags = get_git_tags()
  
      if version in tags:
          log_fail('Version "%s" is already tagged', version)
  
  
  def check_is_repo_clean():
      if not is_git_clean():
          log_fail('You have uncommitted changes in git')
  
  
  def get_git_tags():
      return set(Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines())
  

  def is_git_clean():
      return Popen(['git', 'diff', '--quiet']).wait() == 0
  
  
  def make_git_commit(message, *args):
      message = message % args
      Popen(['git', 'commit', '-am', message]).wait()
  
  
  def make_git_tag(tag):
      log_info('Tagging "%s"', tag)
      Popen(['git', 'tag', tag]).wait()
  
  
  def build_and_upload():
      log_info('Building and uploading to PyPI ...');
      Popen([sys.executable, 'setup.py', 'release', 'sdist', 'upload']).wait()
  
  
  def log_fail(message, *args):
      print >> sys.stderr, 'Error:', message % args
      sys.exit(1)
  
  
  def log_info(message, *args):
      print >> sys.stderr, message % args
  
  
  def main():
      os.chdir(os.path.join(os.path.dirname(__file__), '..'))
  
      version = get_release_version()
      if version is None:
          log_fail('Could not get the version from changelog.')
  
      log_info('Releasing %s', version)
  
      check_release(version)
      make_git_commit('Bump version number to %s', version)
      make_git_tag(version)
      build_and_upload()
  
  
  if __name__ == '__main__':
      main()

---
file: CHANGES.rst
template: |
  {{ module }} ChangeLog
  ===============================

  Version 0.01 
  ------------
  Released on {{ localtime }}

  - initial release

---
file: LICENSE.txt
template: |
  Copyright (c) 2012, {{ config.author }}
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of the {{ config.author }} nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

---
file: README.rst
template: |
  {{ module }}
  =====================


  INSTALLATION
  -------------

  {{ module }} installation is straightforward. If your pip is set up,
  you should just be able to do

      % pip install {{ module }}

  DOCUMENTATION
  -------------

  {{ module }} documentation is available . So you can do:

      % pydoc {{ module }}

  to read the documentation online with your favorite pager.

  {{ config.author }}

---
file: setup.py
template: |
  import os
  import sys
  
  from setuptools import setup, find_packages
  
  if sys.version_info[:2] < (2, 6):
      raise RuntimeError('Requires Python 2.6 or better')
  
  here = os.path.abspath(os.path.dirname(__file__))
  try:
      README = open(os.path.join(here, 'README.rst')).read()
      CHANGES = open(os.path.join(here, 'CHANGES.rst')).read()
  except IOError:
      README = CHANGES = ''
  
  install_requires=[
      'setuptools',
      ]
  
  tests_require = install_requires + [
      'nose',
      ]
  
  setup(name='{{ module }}',
        version='0.01',
        description=('{{ module }} project'),
        long_description=README + '\n\n' +  CHANGES,
        classifiers=[
          "Intended Audience :: Developers",
          "Operating System :: Unix",
          "Operating System :: POSIX",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2.6",
          "Programming Language :: Python :: 2.7",
          "License :: OSI Approved :: BSD License",
          'Topic :: Software Development :: Libraries',
          'Topic :: Software Development :: Libraries :: Python Modules'
          ],
        keywords='',
        author="{{ config.author }}",
        author_email="{{ config.email }} ",
        url="http://github.com/dann/python-{{ module }}",
        license="New BSD License",
        packages=find_packages(),
        include_package_data=True,
        zip_safe=False,
        install_requires = install_requires,
        tests_require = tests_require,
        test_suite = 'nose.collector',
        entry_points = """\
        """
        )

---
file: setup.cfg 
template: |
  [egg_info]
  tag_build = dev
  tag_date = true
  
  [aliases]
  release = egg_info -RDb ''

---
file: .gitignore
template: |
  *.egg
  *.egg-info
  *.pyc
  *$py.class
  *.pt.py
  *.txt.py
  *~
  .coverage
  .tox/
  nosetests.xml
  {{ module }}/coverage.xml
  build/
  dist/
  bin/
  lib/
  include/
  distribute-*.tar.gz
  bookenv/
  jyenv/
  pypyenv/
  env*/

---
file: tox.ini 
template: |
  [tox]
  envlist=py25,py26,py27
  
  [testenv]
  commands=make test

---
file: Manifest.in 
template: |
  include Makefile CHANGES.rst LICENSE.txt
  recursive-include tests *
  recursive-include examples *
  recursive-include docs *
  recursive-exclude docs *.pyc
  recursive-exclude docs *.pyo
  recursive-exclude tests *.pyc
  recursive-exclude tests *.pyo
  recursive-exclude examples *.pyc
  recursive-exclude examples *.pyo
  prune docs/_build
  prune docs/_themes/.git

---
file: Makefile 
template: |
  .PHONY: clean test docs dist check_release
  
  all: clean test
  
  test:
  	python setup.py test 
  
  tox-test:
  	PYTHONDONTWRITEBYTECODE= tox
  
  clean:
  	find . -name '*.pyc' -exec rm -f {} +
  	find . -name '*.pyo' -exec rm -f {} +
  	find . -name '*~' -exec rm -f {} +
  	python setup.py clean
  
  docs:
  	$(MAKE) -C docs html

  dist:
  	python setup.py sdist

  install:
  	python setup.py install

  check_release:
  	python setup.py --long-description | rst2html.py

